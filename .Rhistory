size = 3, family = "CMU Serif") +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal(base_family = "CMU Serif")
cairo_pdf("appendix4-latex.pdf", width = 6, height = 4)
print(varya1_plot)
dev.off()
cairo_pdf("appendix5-latex.pdf", width = 6, height = 4)
print(varya2_plot)
dev.off()
cairo_pdf("apendix6-latex.pdf", width = 6, height = 4)
print(varya3_plot)
dev.off()
cairo_pdf("appendix7-latex.pdf", width = 6, height = 4)
print(varya4_plot)
dev.off()
cairo_pdf("apendix6-latex.pdf", width = 6, height = 4)
print(varya3_plot)
dev.off()
cairo_pdf("appendix7-latex.pdf", width = 6, height = 4)
print(varya4_plot)
dev.off()
varya3_plot <-power_varya %>%
ggplot(aes(x = g, y = b, fill = p3)) +
geom_tile() +
facet_wrap(~a) +
geom_text(aes(label = sprintf("%.2f", p3),
color = ifelse(p3 < 0.5, "white", "black")),  # Dynamic text color
size = 3, family = "CMU Serif") +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal(base_family = "CMU Serif")
varya4_plot <- power_varya %>%
ggplot(aes(x = g, y = b, fill = p4)) +
geom_tile() +
facet_wrap(~a) +
geom_text(aes(label = sprintf("%.2f", p4),
color = ifelse(p4 < 0.5, "white", "black")),  # Dynamic text color
size = 3, family = "CMU Serif") +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal(base_family = "CMU Serif")
cairo_pdf("apendix6-latex.pdf", width = 6, height = 4)
print(varya3_plot)
dev.off()
cairo_pdf("appendix7-latex.pdf", width = 6, height = 4)
print(varya4_plot)
dev.off()
cairo_pdf("appendix6-latex.pdf", width = 6, height = 4)
print(varya3_plot)
dev.off()
dezeeuw_power <- read.csv("dezeeuw_power.csv")
dezeeuw_power %>%
filter(g == b) %>%
select(g, b, p1, p2, p3, p4, Smz, Sdz)
cat(paste0(capture.output(write.csv(dezeeuw_table, row.names = FALSE, quote = FALSE)), collapse = "\n"))
dezeeuw_table <- dezeeuw_power %>%
filter(g == b) %>%
select(g, b, p1, p2, p3, p4, Smz, Sdz)
cat(paste0(capture.output(write.csv(dezeeuw_table, row.names = FALSE, quote = FALSE)), collapse = "\n"))
dezeeuw_table <- dezeeuw_power %>%
filter(g == b) %>%
mutate(Smz = scales::percent(Smz,accuracy=1),
Sdz = scales::percent(Sdz,accuracy=1)) %>%
select(g, b, p1, p2, p3, p4, Smz, Sdz)
cat(paste0(capture.output(write.csv(dezeeuw_table, row.names = FALSE, quote = FALSE)), collapse = "\n"))
dezeeuw_table <- dezeeuw_power %>%
filter(g == b) %>%
mutate(Smz = scales::percent(Smz,accuracy=3),
Sdz = scales::percent(Sdz,accuracy=3)) %>%
select(g, b, p1, p2, p3, p4, Smz, Sdz)
cat(paste0(capture.output(write.csv(dezeeuw_table, row.names = FALSE, quote = FALSE)), collapse = "\n"))
dezeeuw_table <- dezeeuw_power %>%
filter(g == b) %>%
mutate(Smz = scales::percent(Smz),
Sdz = scales::percent(Sdz)) %>%
select(g, b, p1, p2, p3, p4, Smz, Sdz)
cat(paste0(capture.output(write.csv(dezeeuw_table, row.names = FALSE, quote = FALSE)), collapse = "\n"))
ggplot(data = full_mzdz_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Method)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("Gee" = "dotted", "OpenMx" = "solid")) +
jtools::theme_apa() +
theme(text = element_text(family = "serif")) +
scale_color_viridis_d(name = "variable")
ggplot(data = full_mzdz_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Method)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("Gee" = "dotted", "OpenMx" = "solid")) +
theme_minimal(base_family = "CMU Serif")
plot5 <- ggplot(data = full_mzdz_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Method)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("Gee" = "dotted", "OpenMx" = "solid")) scale_color_manual(values = c("red", "blue")) +
cairo_pdf("figure8-latex.pdf", width = 6, height = 4)
print(plot5)
dev.off()
plot5 <- ggplot(data = full_mzdz_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Method)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("Gee" = "dotted", "OpenMx" = "solid")) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal(base_family = "CMU Serif")
cairo_pdf("figure8-latex.pdf", width = 6, height = 4)
print(plot5)
dev.off()
cairo_pdf("appendix8-latex.pdf", width = 6, height = 4)
print(plot5)
dev.off()
# Plotting components
comp_plot_data <- data.frame(setting = 1:4, a = sqrt(seq(.4,1,.2)), c = sqrt(.3), e = sqrt(.3))
# Creating and standardizing the data
comp_plot_data$a_stand <- comp_plot_data$a / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$c_stand <- comp_plot_data$c / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$e_stand <- comp_plot_data$e / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
# Plots for parameter settings
par(mfrow = c(1, 2))
plot(comp_plot_data$setting, comp_plot_data$a, type = "b", pch = "a",
col = "blue", ylim = c(0, 1), xlab = "Setting",
ylab = "Unstandardized Values", xaxt = "n")
# Plotting components
comp_plot_data <- data.frame(setting = 1:4, a = sqrt(seq(.4,1,.2)), c = sqrt(.3), e = sqrt(.3))
# Creating and standardizing the data
comp_plot_data$a_stand <- comp_plot_data$a / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$c_stand <- comp_plot_data$c / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$e_stand <- comp_plot_data$e / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
# Plots for parameter settings
par(mfrow = c(1, 2))
plot(comp_plot_data$setting, comp_plot_data$a, type = "b", pch = "a",
col = "blue", ylim = c(0, 1), xlab = "Setting",
ylab = "Unstandardized Values", xaxt = "n")
axis(1, at = comp_plot_data$setting)
lines(comp_plot_data$setting, comp_plot_data$c, type = "b", pch = "c", col = "red")
plot(comp_plot_data$setting, comp_plot_data$a_stand, type = "b", pch = "a",
col = "blue", ylim = c(0, 1), xlab = "Setting",
ylab = "Standardized Values", xaxt = "n")
lines(comp_plot_data$setting, comp_plot_data$c_stand, type = "b", pch = "c", col = "red")
axis(1, at = comp_plot_data$setting)
par(mfrow = c(1, 1))
library(ggplot2)
library(tidyr)
# Original Data
comp_plot_data <- data.frame(
setting = 1:4,
a = sqrt(seq(.4, 1, .2)),
c = sqrt(.3),
e = sqrt(.3)
)
# Standardizing the data
comp_plot_data$a_stand <- comp_plot_data$a / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$c_stand <- comp_plot_data$c / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$e_stand <- comp_plot_data$e / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
# Preparing data for ggplot (pivot for long format)
comp_plot_data_long <- comp_plot_data %>%
pivot_longer(cols = c(a, c, a_stand, c_stand),
names_to = c(".value", "type"),
names_pattern = "(.*)(_stand)?")
# Plot unstandardized
p1 <- ggplot(comp_plot_data_long, aes(x = setting)) +
geom_line(aes(y = a, color = "blue")) +
geom_line(aes(y = c, color = "red")) +
geom_text(aes(y = a, label = "a", color = "blue"), size = 5, vjust = -0.5) +
geom_text(aes(y = c, label = "c", color = "red"), size = 5, vjust = -0.5) +
labs(x = "Setting", y = "Unstandardized Values") +
scale_color_identity(guide = "none") +
theme_minimal()
# Plot standardized
p2 <- ggplot(comp_plot_data_long, aes(x = setting)) +
geom_line(aes(y = a_stand, color = "blue")) +
geom_line(aes(y = c_stand, color = "red")) +
geom_text(aes(y = a_stand, label = "a", color = "blue"), size = 5, vjust = -0.5) +
geom_text(aes(y = c_stand, label = "c", color = "red"), size = 5, vjust = -0.5) +
labs(x = "Setting", y = "Standardized Values") +
scale_color_identity(guide = "none") +
theme_minimal()
# Display the plots side by side
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
library(ggplot2)
library(tidyr)
# Original Data
comp_plot_data <- data.frame(
setting = 1:4,
a = sqrt(seq(.4, 1, .2)),
c = sqrt(.3),
e = sqrt(.3)
)
# Standardizing the data
comp_plot_data$a_stand <- comp_plot_data$a / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$c_stand <- comp_plot_data$c / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$e_stand <- comp_plot_data$e / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
# Preparing data for ggplot (pivot for long format)
comp_plot_data_long <- comp_plot_data %>%
pivot_longer(cols = c(a, c, a_stand, c_stand),
names_to = c(".value", "type"),
names_pattern = "(.*)(_stand)?")
# Plot unstandardized
p1 <- ggplot(comp_plot_data_long, aes(x = setting)) +
geom_line(aes(y = a, color = "blue")) +
geom_line(aes(y = c, color = "red")) +
geom_text(aes(y = a, label = "a", color = "blue"), size = 5, vjust = -0.5) +
geom_text(aes(y = c, label = "c", color = "red"), size = 5, vjust = -0.5) +
labs(x = "Setting", y = "Unstandardized Values") +
scale_color_identity(guide = "none") +
expand_limits(y = 0) +  # Start y-axis at 0
theme_minimal()
# Plot standardized
p2 <- ggplot(comp_plot_data_long, aes(x = setting)) +
geom_line(aes(y = a_stand, color = "blue")) +
geom_line(aes(y = c_stand, color = "red")) +
geom_text(aes(y = a_stand, label = "a", color = "blue"), size = 5, vjust = -0.5) +
geom_text(aes(y = c_stand, label = "c", color = "red"), size = 5, vjust = -0.5) +
labs(x = "Setting", y = "Standardized Values") +
scale_color_identity(guide = "none") +
expand_limits(y = 0) +  # Start y-axis at 0
theme_minimal()
# Display the plots side by side
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
library(ggplot2)
library(tidyr)
# Original Data
comp_plot_data <- data.frame(
setting = 1:4,
a = sqrt(seq(.4, 1, .2)),
c = sqrt(.3),
e = sqrt(.3)
)
# Standardizing the data
comp_plot_data$a_stand <- comp_plot_data$a / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$c_stand <- comp_plot_data$c / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$e_stand <- comp_plot_data$e / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
# Preparing data for ggplot (pivot for long format)
comp_plot_data_long <- comp_plot_data %>%
pivot_longer(cols = c(a, c, a_stand, c_stand),
names_to = c(".value", "type"),
names_pattern = "(.*)(_stand)?")
# Plot unstandardized
p1 <- ggplot(comp_plot_data_long, aes(x = setting)) +
geom_line(aes(y = a, color = "blue")) +
geom_line(aes(y = c, color = "red")) +
geom_text(aes(y = a, label = "a", color = "blue"), size = 5) +   # Use "a" as the point
geom_text(aes(y = c, label = "c", color = "red"), size = 5) +    # Use "c" as the point
labs(x = "Setting", y = "Unstandardized Values") +
scale_color_identity(guide = "none") +
expand_limits(y = 0) +  # Start y-axis at 0
theme_minimal()
# Plot standardized
p2 <- ggplot(comp_plot_data_long, aes(x = setting)) +
geom_line(aes(y = a_stand, color = "blue")) +
geom_line(aes(y = c_stand, color = "red")) +
geom_text(aes(y = a_stand, label = "a", color = "blue"), size = 5) +   # Use "a" as the point
geom_text(aes(y = c_stand, label = "c", color = "red"), size = 5) +    # Use "c" as the point
labs(x = "Setting", y = "Standardized Values") +
scale_color_identity(guide = "none") +
expand_limits(y = 0) +  # Start y-axis at 0
theme_minimal()
# Display the plots side by side
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
library(ggplot2)
library(tidyr)
# Original Data
comp_plot_data <- data.frame(
setting = 1:4,
a = sqrt(seq(.4, 1, .2)),
c = sqrt(.3),
e = sqrt(.3)
)
# Standardizing the data
comp_plot_data$a_stand <- comp_plot_data$a / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$c_stand <- comp_plot_data$c / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$e_stand <- comp_plot_data$e / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
# Preparing data for ggplot (pivot for long format)
comp_plot_data_long <- comp_plot_data %>%
pivot_longer(cols = c(a, c, a_stand, c_stand),
names_to = c(".value", "type"),
names_pattern = "(.*)(_stand)?")
# Plot unstandardized
p1 <- ggplot(comp_plot_data_long, aes(x = setting)) +
geom_line(aes(y = a, color = "blue")) +
geom_line(aes(y = c, color = "red")) +
# Add white circles behind the text
geom_point(aes(y = a), color = "white", size = 7) +  # White background for letter "a"
geom_point(aes(y = c), color = "white", size = 7) +  # White background for letter "c"
geom_text(aes(y = a, label = "a", color = "blue"), size = 5) +   # Use "a" as the point
geom_text(aes(y = c, label = "c", color = "red"), size = 5) +    # Use "c" as the point
labs(x = "Setting", y = "Unstandardized Values") +
scale_color_identity(guide = "none") +
expand_limits(y = 0) +  # Start y-axis at 0
theme_minimal()
# Plot standardized
p2 <- ggplot(comp_plot_data_long, aes(x = setting)) +
geom_line(aes(y = a_stand, color = "blue")) +
geom_line(aes(y = c_stand, color = "red")) +
# Add white circles behind the text
geom_point(aes(y = a_stand), color = "white", size = 7) +  # White background for letter "a"
geom_point(aes(y = c_stand), color = "white", size = 7) +  # White background for letter "c"
geom_text(aes(y = a_stand, label = "a", color = "blue"), size = 5) +   # Use "a" as the point
geom_text(aes(y = c_stand, label = "c", color = "red"), size = 5) +    # Use "c" as the point
labs(x = "Setting", y = "Standardized Values") +
scale_color_identity(guide = "none") +
expand_limits(y = 0) +  # Start y-axis at 0
theme_minimal()
# Display the plots side by side
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
# Plot unstandardized
p1 <- ggplot(comp_plot_data_long, aes(x = setting)) +
geom_line(aes(y = a, color = "blue")) +
geom_line(aes(y = c, color = "red")) +
# Add white circles behind the text
geom_point(aes(y = a), color = "white", size = 7) +  # White background for letter "a"
geom_point(aes(y = c), color = "white", size = 7) +  # White background for letter "c"
geom_text(aes(y = a, label = "a", color = "blue"), size = 5) +   # Use "a" as the point
geom_text(aes(y = c, label = "c", color = "red"), size = 5) +    # Use "c" as the point
labs(x = "Setting", y = "Unstandardized Values") +
scale_color_identity(guide = "none") +
expand_limits(y = 0) +
theme_minimal(base_family = "CMU Serif")
# Plot standardized
p2 <- ggplot(comp_plot_data_long, aes(x = setting)) +
geom_line(aes(y = a_stand, color = "blue")) +
geom_line(aes(y = c_stand, color = "red")) +
# Add white circles behind the text
geom_point(aes(y = a_stand), color = "white", size = 7) +  # White background for letter "a"
geom_point(aes(y = c_stand), color = "white", size = 7) +  # White background for letter "c"
geom_text(aes(y = a_stand, label = "a", color = "blue"), size = 5) +   # Use "a" as the point
geom_text(aes(y = c_stand, label = "c", color = "red"), size = 5) +    # Use "c" as the point
labs(x = "Setting", y = "Standardized Values") +
scale_color_identity(guide = "none") +
expand_limits(y = 0) +
theme_minimal(base_family = "CMU Serif")
# Display the plots side by side
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
# Plot unstandardized
p1 <- ggplot(comp_plot_data_long, aes(x = setting)) +
geom_line(aes(y = a, color = "blue")) +
geom_line(aes(y = c, color = "red")) +
# Add white circles behind the text
geom_point(aes(y = a), color = "white", size = 7) +  # White background for letter "a"
geom_point(aes(y = c), color = "white", size = 7) +  # White background for letter "c"
geom_text(aes(y = a, label = "a", color = "blue"), size = 5, family = "CMU Serif") +   # Use "a" as the point
geom_text(aes(y = c, label = "c", color = "red"), size = 5, family = "CMU Serif") +    # Use "c" as the point
labs(x = "Setting", y = "Unstandardized Values") +
scale_color_identity(guide = "none") +
expand_limits(y = 0) +
theme_minimal(base_family = "CMU Serif")
# Plot standardized
p2 <- ggplot(comp_plot_data_long, aes(x = setting)) +
geom_line(aes(y = a_stand, color = "blue")) +
geom_line(aes(y = c_stand, color = "red")) +
# Add white circles behind the text
geom_point(aes(y = a_stand), color = "white", size = 7) +  # White background for letter "a"
geom_point(aes(y = c_stand), color = "white", size = 7) +  # White background for letter "c"
geom_text(aes(y = a_stand, label = "a", color = "blue", family = "CMU Serif"), size = 5) +   # Use "a" as the point
geom_text(aes(y = c_stand, label = "c", color = "red", family = "CMU Serif"), size = 5) +    # Use "c" as the point
labs(x = "Setting", y = "Standardized Values") +
scale_color_identity(guide = "none") +
expand_limits(y = 0) +
theme_minimal(base_family = "CMU Serif")
# Display the plots side by side
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
expand_limits(y = c(0,1) +
# Plot unstandardized
p1 <- ggplot(comp_plot_data_long, aes(x = setting)) +
geom_line(aes(y = a, color = "blue")) +
geom_line(aes(y = c, color = "red")) +
# Add white circles behind the text
geom_point(aes(y = a), color = "white", size = 7) +  # White background for letter "a"
geom_point(aes(y = c), color = "white", size = 7) +  # White background for letter "c"
geom_text(aes(y = a, label = "a", color = "blue"), size = 5, family = "CMU Serif") +   # Use "a" as the point
geom_text(aes(y = c, label = "c", color = "red"), size = 5, family = "CMU Serif") +    # Use "c" as the point
labs(x = "Setting", y = "Unstandardized Values") +
scale_color_identity(guide = "none") +
expand_limits(y = c(0,1)) +
theme_minimal(base_family = "CMU Serif")
# Plot standardized
p2 <- ggplot(comp_plot_data_long, aes(x = setting)) +
# Display the plots side by side
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
# Plot unstandardized
p1 <- ggplot(comp_plot_data_long, aes(x = setting)) +
geom_line(aes(y = a, color = "blue")) +
geom_line(aes(y = c, color = "red")) +
# Add white circles behind the text
geom_point(aes(y = a), color = "white", size = 7) +  # White background for letter "a"
geom_point(aes(y = c), color = "white", size = 7) +  # White background for letter "c"
geom_text(aes(y = a, label = "a", color = "blue"), size = 5, family = "CMU Serif") +   # Use "a" as the point
geom_text(aes(y = c, label = "c", color = "red"), size = 5, family = "CMU Serif") +    # Use "c" as the point
labs(x = "Setting", y = "Unstandardized Values") +
scale_color_identity(guide = "none") +
ylim(0,1) +
theme_minimal(base_family = "CMU Serif")
# Plot standardized
p2 <- ggplot(comp_plot_data_long, aes(x = setting)) +
geom_line(aes(y = a_stand, color = "blue")) +
geom_line(aes(y = c_stand, color = "red")) +
# Add white circles behind the text
geom_point(aes(y = a_stand), color = "white", size = 7) +  # White background for letter "a"
geom_point(aes(y = c_stand), color = "white", size = 7) +  # White background for letter "c"
geom_text(aes(y = a_stand, label = "a", color = "blue", family = "CMU Serif"), size = 5) +   # Use "a" as the point
geom_text(aes(y = c_stand, label = "c", color = "red", family = "CMU Serif"), size = 5) +    # Use "c" as the point
labs(x = "Setting", y = "Standardized Values") +
scale_color_identity(guide = "none") +
ylim(0,1) +
theme_minimal(base_family = "CMU Serif")
# Display the plots side by side
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
# Plot unstandardized
p1 <- ggplot(comp_plot_data_long, aes(x = setting)) +
geom_line(aes(y = a, color = "blue")) +
geom_line(aes(y = c, color = "red")) +
# Add white circles behind the text
geom_point(aes(y = a), color = "white", size = 6) +  # White background for letter "a"
geom_point(aes(y = c), color = "white", size = 6) +  # White background for letter "c"
geom_text(aes(y = a, label = "a", color = "blue"), size = 4, family = "CMU Serif") +   # Use "a" as the point
geom_text(aes(y = c, label = "c", color = "red"), size = 4, family = "CMU Serif") +    # Use "c" as the point
labs(x = "Setting", y = "Unstandardized Values") +
scale_color_identity(guide = "none") +
ylim(0,1) +
theme_minimal(base_family = "CMU Serif")
# Plot standardized
p2 <- ggplot(comp_plot_data_long, aes(x = setting)) +
geom_line(aes(y = a_stand, color = "blue")) +
geom_line(aes(y = c_stand, color = "red")) +
# Add white circles behind the text
geom_point(aes(y = a_stand), color = "white", size = 6) +  # White background for letter "a"
geom_point(aes(y = c_stand), color = "white", size = 6) +  # White background for letter "c"
geom_text(aes(y = a_stand, label = "a", color = "blue", family = "CMU Serif"), size = 4) +   # Use "a" as the point
geom_text(aes(y = c_stand, label = "c", color = "red", family = "CMU Serif"), size = 4) +    # Use "c" as the point
labs(x = "Setting", y = "Standardized Values") +
scale_color_identity(guide = "none") +
ylim(0,1) +
theme_minimal(base_family = "CMU Serif")
# Display the plots side by side
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
# Plots for parameter settings
par(mfrow = c(1, 2))
plot(comp_plot_data$setting, comp_plot_data$a, type = "b", pch = "a",
col = "blue", ylim = c(0, 1), xlab = "Setting",
ylab = "Unstandardized Values", xaxt = "n")
axis(1, at = comp_plot_data$setting)
grid.arrange(p1, p2, ncol = 2)
appendix_plot3 <- grid.arrange(p1, p2, ncol = 2)
cairo_pdf("apendix3-latex.pdf", width = 6, height = 4)
print(appendix_plot3)
dev.off()
cairo_pdf("apendix3-latex.pdf", width = 8, height = 4)
print(appendix_plot3)
dev.off()
# Display the plots side by side
library(gridExtra)
cairo_pdf("apendix3-latex.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)
dev.off()
cairo_pdf("apendix3-latex.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)
dev.off()
# Display the plots side by side
library(gridExtra)
cairo_pdf("apendix3-latex.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)
dev.off()
cairo_pdf("appendix3-latex.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)
dev.off()
cairo_pdf("appendix3-latex.pdf", width = 6, height = 4)
grid.arrange(p1, p2, ncol = 2)
dev.off()
cairo_pdf("appendix3-latex.pdf", width = 8, height = 6)
grid.arrange(p1, p2, ncol = 2)
dev.off()
cairo_pdf("appendix3-latex.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)
dev.off()
View(comp_plot_data_stand_long)
cairo_pdf("appendix3-latex.pdf", width = 6, height = 3)
grid.arrange(p1, p2, ncol = 2)
dev.off()
View(comp_plot_data_stand_long)
cairo_pdf("appendix3-latex.pdf", width = 4, height = 2)
grid.arrange(p1, p2, ncol = 2)
dev.off()
View(comp_plot_data_long)
cairo_pdf("appendix3-latex.pdf", width = 5, height = 2.5)
grid.arrange(p1, p2, ncol = 2)
dev.off()
cairo_pdf("appendix3-latex.pdf", width = 8, height = 4)
grid.arrange(p1, p2, ncol = 2)
dev.off()
cairo_pdf("appendix3-latex.pdf", width = 4, height = 2)
grid.arrange(p1, p2, ncol = 2)
dev.off()
cairo_pdf("appendix3-latex.pdf", width = 5, height = 2.5)
grid.arrange(p1, p2, ncol = 2)
dev.off()
cairo_pdf("appendix3-latex.pdf", width = 6, height = 2.5)
grid.arrange(p1, p2, ncol = 2)
dev.off()
