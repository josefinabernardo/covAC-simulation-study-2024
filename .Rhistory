mxAlgebra(expression=cbind(b0+pred%*%t(bs1), b0+pred%*%t(bs2)), name='expMean'),
mxData(observed=phdatmz_e, type="raw"),
mxExpectationNormal(covariance="SAT.expCovMZ",
means = "expMean", varnames),
mxFitFunctionML()
)
# a model the data, the fit function (DZ)
DZmodel=OpenMx::mxModel("DZ",
#
# Matrix expMean for expected mean vector for MZ and DZ twins
mxMatrix(type="Full", nrow=1, ncol=4, free=FALSE, labels=c("data.pgst1","data.pgst2","data.pgsm","data.pgsf"), name="pred"),
mxMatrix(type="Full", nrow=1, ncol=4, free=c(TRUE,TRUE,TRUE,TRUE), values=c(0,0,0,0),
labels=c("bpgst","bpgsb","bpgsg","bpgsg"), name="bs1"),
mxMatrix(type="Full", nrow=1, ncol=4, free=TRUE, values=c(0,0,0,0),
labels=c("bpgsb","bpgst","bpgsg","bpgsg"), name="bs2"),
mxMatrix(type="Full", nrow=1, ncol=1,
free=c(TRUE),values=c(0),labels=c("b0"),
name="Int"),
mxAlgebra(expression=cbind(b0+pred%*%t(bs1), b0+pred%*%t(bs2)), name='expMean'),
mxData(observed=phdatdz_e, type="raw"),
mxExpectationNormal(covariance="SAT.expCovDZ",
means = "expMean", varnames),
mxFitFunctionML()
)
varnames <- c('pht1','pht2')#
#
# the model to calculate expected summary statistics
# this is the twin model phenotypic
# [1] "pht1"   "pht2"   "pgsm"   "pgsf"   "pgst1"  "pgsnt1" "pgst2"  "pgsnt2" "pgsmf"  "mpgst"
# [1] "pgsm"  "pgsf"  "pgst1" "pgst2" "pht1"  "pht2"  "pgsmf" "mpgst"
nphen1 <- 1
nphen2 <- 2
DZModel  <-  OpenMx::mxModel("DZonly",
#
# Matrices a, c, and e to store the a, c, and e path coefficients
mxMatrix(type="Stand", nrow=nphen2, ncol=nphen2,
free=c(TRUE), values=c(.25),
labels=c("rdz"),name="Rdz"),
mxMatrix(type="Diag", nrow=nphen2, ncol=nphen2,
free=c(TRUE), values=c(.7),
labels=c("sd","sd"),name="SD"),
#
#
# Matrix expCovMZ for expected covariance matrix for DZ twins
#
mxAlgebra( expression=
SD%*%Rdz%*%SD,,name="expCovDZ"),
#
# Matrix expMean for expected mean vector for DZ twins
#
mxMatrix(type="Full", nrow=1, ncol=4, free=FALSE, labels=c("data.pgst1","data.pgst2","data.pgsm","data.pgsf"), name="pred"),
mxMatrix(type="Full", nrow=1, ncol=4, free=c(TRUE,TRUE,TRUE,TRUE), values=c(0,0,0,0),
labels=c("bpgst","bpgsb","bpgsg","bpgsg"), name="bs1"),
mxMatrix(type="Full", nrow=1, ncol=4, free=TRUE, values=c(0,0,0,0),
labels=c("bpgsb","bpgst","bpgsg","bpgsg"), name="bs2"),
mxMatrix(type="Full", nrow=1, ncol=1,
free=c(TRUE),values=c(0),labels=c("b0"),
name="B0"),
mxAlgebra(expression=cbind(B0+pred%*%t(bs1), B0+pred%*%t(bs2)), name='expMean'),
mxData(observed=phdatdz_e, type="raw"),
mxExpectationNormal(covariance="expCovDZ",
means ="expMean", varnames),
mxFitFunctionML()
)
# Model_4 <-  OpenMx::mxModel(name="DZ1SAT", DZModel)
Model_4 <-  OpenMx::mxModel(DZModel)
# fit the model
Model_4out <- mxRun(Model_4, silent = TRUE)
Model_4g <- omxSetParameters(Model_4out, labels='bpgsg', values=0, free=FALSE)
Model_4g_out = mxRun(Model_4g, silent = TRUE)
#
Model_4b=omxSetParameters(Model_4out, labels='bpgsb', values=0, free=FALSE)
Model_4b_out <- mxRun(Model_4b, silent = TRUE)
# "bpgsb","bpgsg"
Model_4bg <- omxSetParameters(Model_4out, labels=c('bpgsb','bpgsg'), free=FALSE, values=c(0))
Model_4bg_out <- mxRun(Model_4bg, silent = TRUE)
# Power
ncp_tmp <- c(
mxCompare(Model_1b_out, Model_1bg_out)[2,7],
mxCompare(Model_1g_out, Model_1bg_out)[2,7],
mxCompare(Model_1out, Model_1g_out)[2,7],
mxCompare(Model_1out, Model_1b_out)[2,7],
mxCompare(Model_4b_out, Model_4bg_out)[2,7],
mxCompare(Model_4g_out, Model_4bg_out)[2,7],
mxCompare(Model_4out, Model_4g_out)[2,7],
mxCompare(Model_4out, Model_4b_out)[2,7]
)
ncp_power_tmp <- sapply(ncp_tmp, function(ncp) {
gnome_power(alpha, 1, ncp)
})
# Estimates
estimates_tmp <- c(
summary(Model_1b_out)$parameters[8, "Estimate"], # g1 - CT Model 1 CT only
summary(Model_1g_out)$parameters[8,'Estimate'], # b1 - SI Model 1 SI only
summary(Model_1out)$parameters[9,'Estimate'], # g1 - CT Model 1 both
summary(Model_1out)$parameters[8,'Estimate'], # b1 - SI Model 1 both
summary(Model_4b_out)$parameters[4, 'Estimate'], # bpgsg - CT Model 4 CT only
summary(Model_4g_out)$parameters[4, 'Estimate'], # bpgsb - SI Model 4 SI only
summary(Model_4out)$parameters[5, 'Estimate'], # bpgsg - CT Model 4
summary(Model_4out)$parameters[4, 'Estimate'] # bpgsb - SI Model 4
)
mxkeep[counter_within, ] <- c(ncp_power_tmp, estimates_tmp)
}
# For mxkeep
jpow <- 1:8
jest <- 9:16
row_index <- counter_overall - n_set + 1
if (assortm_logical == TRUE) {
# Execute these lines when assortm_logical is TRUE
final_mx_estimates[row_index : counter_overall, 1:10] <- setkeep[, 1:10]
final_mx_power[row_index : counter_overall, 1:10] <- setkeep[, 1:10]
final_mx_estimates[row_index : counter_overall, 11:18] <- round(mxkeep[, jest], 3)
final_mx_power[row_index : counter_overall, 11:18] <- round(mxkeep[, jpow], 3)
} else {
# Execute these lines when assortm_logical is FALSE
final_mx_estimates[row_index : counter_overall, 1:11] <- setkeep[, 1:11]
final_mx_power[row_index : counter_overall, 1:11] <- setkeep[, 1:11]
final_mx_estimates[row_index : counter_overall, 12:19] <- round(mxkeep[, jest], 3)
final_mx_power[row_index : counter_overall, 12:19] <- round(mxkeep[, jpow], 3)
}
counter_within = 0 # reset set counter for each PGS setting
}
# Re-name columns
ifelse(assortm_logical,
setnames <- c('nmz','ndz','a','c','e','g','b','x','PGS','A'),
setnames <- c('nmz','ndz','a','c','e','g','b','x','PGS','A','assortm'))
colnames(final_mx_estimates) <- c(setnames, paste0("e", 1:8))
colnames(final_mx_power) <- c(setnames, paste0("p", 1:8))
# Use effect size function on the data sets
final_mx_estimates <- final_mx_estimates %>%
mutate(Smz = gnome_effect(a = a, c = c, e = e, g = g, b = b)$mz,
Sdz = gnome_effect(a = a, c = c, e = e, g = g, b = b)$dz)
final_mx_power <- final_mx_power %>%
mutate(Smz = gnome_effect(a = a, c = c, e = e, g = g, b = b)$mz,
Sdz = gnome_effect(a = a, c = c, e = e, g = g, b = b)$dz)
return(list(power = final_mx_power, params = final_mx_estimates))
}
gnome_power <- function(alpha = .05, df, ncp) {
critical_chi2 <- qchisq(alpha, df, lower.tail = F)
if (abs(ncp) < .0001) { ncp = 0 }
power <- pchisq(critical_chi2, df, ncp, lower.tail = F)
power
}
gnome_effect <- function(a, c, e, g, b, varA = 1, varC = 1, varE = 1) {
# Phenotypic covariances for MZ and DZ
smz = 2 * (g + a/2 + b/2)**2*varA + (a*varA/2 + b*varA/2) * a + (a*varA/2 + b*varA/2) * b + c**2*varC + e**2
sdz = 2 * (g + a/2 + b/2)**2*varA + a**2*varA/2 + b**2*varA/2 + c**2*varC + e**2*varE
# Variance Increase
varPh_noAC <- a**2*varA + c**2*varC + e**2*varE
effect_mz <- (smz - varPh_noAC) / varPh_noAC
effect_dz <- (sdz - varPh_noAC) / varPh_noAC
effect = list(mz = effect_mz, dz = effect_dz)
return(effect)
}
sample_list <- list()
for (n in unique_sample_sizes) {
if (length(sample_list) < which(unique_sample_sizes == n)) {
result <- gnome_mx_simulation(nmz = n, ndz = n, ct = 0.03, si = 0.03, nloci = 100, npgsloci = 10)
sample_list <- append(sample_list, list(result))
}
}
View(sample_list)
# Extract power and parameters
sample_power <- do.call(rbind, lapply(sample_list, `[[`, "power"))
sample_params <- do.call(rbind, lapply(sample_list, `[[`, "params"))
sample_power
# Extract power and parameters
sample_power <- do.call(rbind, lapply(sample_list, `[[`, "power"))
sample_params <- do.call(rbind, lapply(sample_list, `[[`, "params"))
# install.packages("~/GitHub/gnomesims_0.0.0.9000.tar.gz", repos = NULL, type = "source")
devtools::install_github("josefinabernardo/gnomesims", force = TRUE)
# Revision - Create data for different sample sizes
# Define sample sizes
sample_sizes <- c(100, seq(10000, 50000, 10000))
sample_sizes_dz <- sample_sizes/2
unique_sample_sizes <- unique(c(sample_sizes, sample_sizes_dz))
sample_list <- list()
for (n in unique_sample_sizes) {
if (length(sample_list) < which(unique_sample_sizes == n)) {
result <- gnome_mx_simulation(nmz = n, ndz = n, ct = 0.03, si = 0.03, nloci = 100, npgsloci = 10)
sample_list <- append(sample_list, list(result))
}
}
# Extract power and parameters
sample_power <- do.call(rbind, lapply(sample_list, `[[`, "power"))
sample_params <- do.call(rbind, lapply(sample_list, `[[`, "params"))
write.csv(sample_power, "sample_power.csv", row.names = TRUE)
write.csv(sample_params, "sample_params.csv", row.names = TRUE)
# Start here if files are already created
paper_power <- read.csv("paper_mx_power.csv")
paper_estimates <- read.csv("paper_mx_estimates.csv")
# install.packages("~/GitHub/gnomesims_0.0.0.9000.tar.gz", repos = NULL, type = "source")
devtools::install_github("josefinabernardo/gnomesims", force = TRUE)
library(gnomesims)
library(OpenMx)
R.version
# Install all packages
devtools::install_github("josefinabernardo/gnomesims")
library(gnomesims)
library(OpenMx)
# Run function for detailed lots in running text
paper_data <- gnomesims::gnome_mx_simulation(ct = seq(0,.1,.02), si = seq(0,.1,.02),
nloci = 100,
npgsloci = c(2, 5, 10, 15))
# install.packages("~/GitHub/gnomesims_0.0.0.9000.tar.gz", repos = NULL, type = "source")
devtools::install_github("josefinabernardo/gnomesims", force = TRUE)
library(gnomesims)
detach("package:gnomesims", unload = TRUE)
# install.packages("~/GitHub/gnomesims_0.0.0.9000.tar.gz", repos = NULL, type = "source")
devtools::install_github("josefinabernardo/gnomesims", force = TRUE)
library(OpenMx)
library(tidyverse)
# Revision - Create data for different sample sizes
# Define sample sizes
sample_sizes <- c(100, seq(10000, 50000, 10000))
sample_sizes_dz <- sample_sizes/2
unique_sample_sizes <- unique(c(sample_sizes, sample_sizes_dz))
sample_list <- list()
for (n in unique_sample_sizes) {
if (length(sample_list) < which(unique_sample_sizes == n)) {
result <- gnome_mx_simulation(nmz = n, ndz = n, ct = 0.03, si = 0.03, nloci = 100, npgsloci = 10)
sample_list <- append(sample_list, list(result))
}
}
library(gnomesims)
# Revision - Create data for different sample sizes
# Define sample sizes
sample_sizes <- c(100, seq(10000, 50000, 10000))
sample_sizes_dz <- sample_sizes/2
unique_sample_sizes <- unique(c(sample_sizes, sample_sizes_dz))
sample_list <- list()
for (n in unique_sample_sizes) {
if (length(sample_list) < which(unique_sample_sizes == n)) {
result <- gnome_mx_simulation(nmz = n, ndz = n, ct = 0.03, si = 0.03, nloci = 100, npgsloci = 10)
sample_list <- append(sample_list, list(result))
}
}
# Extract power and parameters
sample_power <- do.call(rbind, lapply(sample_list, `[[`, "power"))
sample_params <- do.call(rbind, lapply(sample_list, `[[`, "params"))
write.csv(sample_power, "sample_power.csv", row.names = TRUE)
write.csv(sample_params, "sample_params.csv", row.names = TRUE)
# Start here if files are already created
paper_power <- read.csv("paper_mx_power.csv")
paper_estimates <- read.csv("paper_mx_estimates.csv")
# Packages
library(tidyverse)
library(cowplot)
library(gridExtra)
library(extrafont)
library(Cairo)
# Load in data sets
paper_power <- read.csv("paper_mx_power.csv")
paper_estimates <- read.csv("paper_mx_estimates.csv")
sample_power <- read.csv("sample_power.csv")
sample_params <- read.csv("sample_params.csv")
# RUNNING TEXT
# Plot 2 - Statistical Power Relative to effect sizes for cultural transmission and sibling interaction
part1 <- paper_power %>%
filter(PGS == 0.1) %>%
ggplot(aes(x = g, y = b, fill = p1)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", p1),
color = ifelse(p1 > 0.5, "white", "black")),  # Dynamic text color
size = 3, family = "CMU Serif") +
scale_fill_gradient(low = "red", high = "blue", limits = c(0, 1)) +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = NULL, y = NULL, fill = "Power") +
ggtitle("Power Cultural Transmission\n(Using Parent PGS-Only)") +
theme_minimal(base_family = "CMU Serif") +
theme(legend.position = "none", plot.title = element_text(size = 12, hjust = 0.5),
axis.ticks = element_blank(), panel.grid = element_blank(),
axis.text.x = element_text(margin = margin(t = -5)),
axis.text.y = element_text(margin = margin(r = -5)))
part2 <- paper_power %>%
filter(PGS == 0.1) %>%
ggplot(aes(x = g, y = b, fill = p2)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", p2),
color = ifelse(p2 > 0.5, "white", "black")),  # Dynamic text color
size = 3, family = "CMU Serif") +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = NULL, y = NULL, fill = "Power") +
ggtitle("Power Sibling Interaction\n(Using Sibling PGS-Only)") +
theme_minimal(base_family = "CMU Serif") +
theme(legend.position = "none", plot.title = element_text(size = 12, hjust = 0.5),
axis.ticks = element_blank(), panel.grid = element_blank(),
axis.text.x = element_text(margin = margin(t = -5)),
axis.text.y = element_text(margin = margin(r = -5)))
part3 <- paper_power %>%
filter(PGS == 0.1) %>%
ggplot(aes(x = g, y = b, fill = p3)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", p3),
color = ifelse(p3 > 0.5, "white", "black")),  # Dynamic text color
size = 3, family = "CMU Serif") +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = NULL, y = NULL, fill = "Power") +
ggtitle("Power Cultural Transmission\n(Using Sibling & Parent PGS)") +
theme_minimal(base_family = "CMU Serif") +
theme(legend.position = "none", plot.title = element_text(size = 12, hjust = 0.5),
axis.ticks = element_blank(), panel.grid = element_blank(),
axis.text.x = element_text(margin = margin(t = -5)),
axis.text.y = element_text(margin = margin(r = -5)))
part4 <- paper_power %>%
filter(PGS == 0.1) %>%
ggplot(aes(x = g, y = b, fill = p4)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", p4),
color = ifelse(p4 > 0.5, "white", "black")),  # Dynamic text color
size = 3, family = "CMU Serif") +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = NULL, y = NULL, fill = "Power") +
ggtitle("Power Sibling Interaction\n(Using Sibling & Parent PGS)") +
theme_minimal(base_family = "CMU Serif") +
theme(legend.position = "none", plot.title = element_text(size = 12, hjust = 0.5),
axis.ticks = element_blank(), panel.grid = element_blank(),
axis.text.x = element_text(margin = margin(t = -5)),
axis.text.y = element_text(margin = margin(r = -5)))
# Combine the plots into a grid
plot2_int_1 <- plot_grid(part1, part2, ncol = 2, align = "hv")
plot2_int_2 <- plot_grid(part3, part4, ncol = 2, align = "hv")
plot2_int <- plot_grid(part1, part2, part3, part4, ncol = 2, align = "hv")
plot2_1 <- ggdraw() +
draw_plot(plot2_int_1, x = 0.05, y = 0.05, width = 0.95, height = 0.95) +
draw_label("Cultural Transmission", x = 0.5, y = 0, vjust = -0.5, fontfamily = "CMU Serif") +
draw_label("Sibling Interaction", x = 0, y = 0.5, angle = 90, vjust = 1.5, fontfamily = "CMU Serif")
plot2_1
plot2_2 <- ggdraw() +
draw_plot(plot2_int_2, x = 0.05, y = 0.05, width = 0.95, height = 0.95) +
draw_label("Cultural Transmission", x = 0.5, y = 0, vjust = -0.5, fontfamily = "CMU Serif") +
draw_label("Sibling Interaction", x = 0, y = 0.5, angle = 90, vjust = 1.5, fontfamily = "CMU Serif")
plot2_2
plot2 <- ggdraw() +
draw_plot(plot2_int, x = 0.05, y = 0.05, width = 0.95, height = 0.95) +
draw_label("Cultural Transmission (CT)", x = 0.5, y = 0, vjust = -0.5, fontfamily = "CMU Serif") +
draw_label("Sibling Interaction (SI)", x = 0, y = 0.5, angle = 90, vjust = 1.5, fontfamily = "CMU Serif")
plot2
#  labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power")
# Plot 3 - Type I Error Rate for Four Different Strengths of PGS Predictive Power in the MZ & DZ Sample
p1_mx_data <- paper_power %>%
filter(g == 0) %>%
dplyr::select("b", "p1", "PGS") %>%
mutate(Variable = "Cultural Transmission", Sample = "MZ & DZ") %>%
rename(Confounder = b, Power = p1)
p2_mx_data <- paper_power %>%
filter(b == 0) %>%
dplyr::select("g", "p2", 'PGS') %>%
mutate(Variable = "Sibling Interaction", Sample = "MZ & DZ") %>%
rename(Confounder = g, Power = p2)
mx_mzdz_data <- rbind(p1_mx_data, p2_mx_data) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%")))
axis_lines_mzdz <- mx_mzdz_data %>%
group_by(PGS_percent) %>%
summarise(x_start = 0, x_end = max(Confounder, na.rm = TRUE),
y_start = 0, y_end = 0.7) %>%
ungroup()
plot3 <- ggplot(data = mx_mzdz_data, mapping = aes(x = Confounder, y = Power, color = Variable)) +
geom_line(linewidth = 0.8) +
geom_point(size = 1.5) +
facet_wrap(~PGS_percent) +
geom_segment(data = axis_lines_mzdz,
aes(x = x_start, xend = x_end, y = 0, yend = 0),
arrow = arrow(length = unit(0.3, "cm"), type = "closed", angle = 10),
color = "gray50", linewidth = 0.5) +
geom_segment(data = axis_lines_mzdz,
aes(x = 0, xend = 0, y = y_start, yend = y_end),
arrow = arrow(length = unit(0.3, "cm"), type = "closed", angle = 10),
color = "gray50", linewidth = 0.5) +
scale_color_manual(values = c("red", "blue")) +
labs(color = "Modeled Source of\nAC Covariance") +
theme_minimal(base_family = "CMU Serif") +
theme(legend.text = element_text(size = 13),
legend.title = element_text(size = 13),
axis.text = element_text(size = 10),
axis.title = element_text(size = 13),
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(size = 12))
plot3
# Plot 4 - Type I Error Rate for Four Different Strengths of PGS Predictive Power in the MZ & DZ vs. DZ-only Sample
p5_mx_data <- paper_power %>%
filter(g == 0) %>%
dplyr::select("b", "p5", "PGS") %>%
mutate(Variable = "Cultural Transmission", Sample = "DZ") %>%
rename(Confounder = b, Power = p5)
p6_mx_data <- paper_power %>%
filter(b == 0) %>%
dplyr::select("g", "p6", 'PGS') %>%
mutate(Variable = "Sibling Interaction", Sample = "DZ") %>%
rename(Confounder = g, Power = p6)
mx_dz_data <- rbind(p5_mx_data, p6_mx_data) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%")))
full_mx_data <- rbind(mx_mzdz_data, mx_dz_data)
axis_lines_pgs <- full_mx_data %>%
group_by(PGS_percent) %>%
summarise(x_start = 0, x_end = max(Confounder),
y_start = 0, y_end = 0.75) %>%
ungroup()
plot4 <- ggplot(data = full_mx_data) +
geom_line(linewidth = 0.8, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Sample)) +
geom_point(size = 1.5, mapping = aes(x = Confounder, y = Power, color = Variable)) +
facet_wrap(~PGS_percent) +
geom_segment(data = axis_lines_pgs,
aes(x = x_start, xend = x_end, y = 0, yend = 0),
arrow = arrow(length = unit(0.3, "cm"), type = "closed", angle = 10),
color = "gray50", linewidth = 0.5) +
geom_segment(data = axis_lines_pgs,
aes(x = 0, xend = 0, y = y_start, yend = y_end),
arrow = arrow(length = unit(0.3, "cm"), type = "closed", angle = 10),
color = "gray50", linewidth = 0.5) +
scale_linetype_manual(values = c("DZ" = "dotted", "MZ & DZ" = "solid")) +
scale_color_manual(values = c("red", "blue")) +
labs(color = "Modeled Source of\nAC Covariance") +
theme_minimal(base_family = "CMU Serif") +
theme(legend.text = element_text(size = 13),
legend.title = element_text(size = 13),
axis.text = element_text(size = 10),
axis.title = element_text(size = 13),
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(size = 12))
plot4
# Prepare sample data
sample_data <- sample_power %>%
select(nmz, ndz, p3, p4, p7, p8) %>%
mutate(N = nmz + ndz) %>%
rename(c("Sample Size" = "N", "Cultural Transmission MZ & DZ" = "p3",
"Sibling Interaction MZ & DZ" = "p4",
"Cultural Transmission DZ" = "p7",
"Sibling Interaction DZ" = "p8"))
sample_data_long <- sample_data %>%
mutate(Sample_Size_Original = `Sample Size`) %>%
pivot_longer(cols = c("Cultural Transmission MZ & DZ",
"Sibling Interaction MZ & DZ",
"Cultural Transmission DZ",
"Sibling Interaction DZ"),
names_to = "variable", values_to = "value") %>%
mutate(`Sample Size` = ifelse(str_detect(variable, "DZ$") & !str_detect(variable, "MZ & DZ"),
Sample_Size_Original / 2,
Sample_Size_Original)) %>%
select(-Sample_Size_Original)
common_sample_sizes <- sample_data_long %>%
group_by(`Sample Size`) %>%
summarise(has_MZ_DZ = any(str_detect(variable, "MZ & DZ")),
has_DZ = any(str_detect(variable, "DZ$") & !str_detect(variable, "MZ & DZ"))) %>%
filter(has_MZ_DZ & has_DZ) %>%
pull(`Sample Size`)
sample_data_long <- sample_data_long %>%
filter(`Sample Size` %in% common_sample_sizes) %>%
filter(`Sample Size` %in% c(10000, 20000, 30000, 40000, 50000))
plot6 <- ggplot(sample_data_long, aes(x = `Sample Size`, y = value,
color = variable, shape = variable)) +
geom_line() +
geom_point() +
labs(title = NULL,
x = "Sample Size",
y = "Power",
color = "Modeled Source of\nAC Covariance",
shape = "Modeled Source of\nAC Covariance") +
scale_color_manual(values = colorRampPalette(c("red", "blue"))(4)) +
scale_shape_manual(values = c(15, 17, 18, 19)) +
scale_x_continuous(limits = c(5000, 55000),
breaks = seq(0, 55000, by = 10000),
expand = expansion(mult = 0)) +
scale_y_continuous(limits = c(0, 0.7), expand = expansion(mult = 0)) +
theme_minimal(base_family = "CMU Serif") +
theme(
axis.line = element_line(color = "gray50", linewidth = 0.5),
axis.ticks = element_line(color = "gray50"),
axis.text = element_text(color = "black", size = 11),
axis.title = element_text(color = "black", size = 13),
axis.line.x =
element_line(arrow = arrow(length = unit(0.3, "cm"),
angle = 10,
type="closed")),
axis.line.y =
element_line(arrow = arrow(length = unit(0.3, "cm"),
angle = 10,
type="closed")),
legend.text = element_text(size = 11),
legend.title = element_text(size = 13)
)
plot6
# APPENDIX
ext_power <- read.csv("2024-06-04_mx_power_ext.csv")
library(gnomesims)
library(tidyverse)
dz_data <- gnomesims::gnome_mx_simulation(ct = seq(0,.1,.02), si = seq(0,.1,.02),
nloci = 100, ndz = 8000,
npgsloci = c(2, 5, 10, 15))
install.packages("OpenMx", repos="https://openmx.ssri.psu.edu/software/getOpenMx.R")
install.packages("OpenMx", repos = "https://openmx.ssri.psu.edu/software/getOpenMx.R")
install.packages("OpenMx", repos = "https://openmx.ssri.psu.edu/software/getOpenMx/nightly-build", type="source")
install.packages("OpenMx", repos = "https://openmx.ssri.psu.edu/software/getOpenMx/nightly-build", type = "source")
install.packages("OpenMx")
install.packages("OpenMx")
devtools::install_github("josefinabernardo/gnomesims", force = TRUE)
library(gnomesims)
library(tidyverse)
dz_data <- gnomesims::gnome_mx_simulation(ct = seq(0,.1,.02), si = seq(0,.1,.02),
nloci = 100, ndz = 8000,
npgsloci = c(2, 5, 10, 15))
R.version.string
install.packages(c("boot", "extrafontdb", "Matrix", "openssl", "rmarkdown", "systemfonts"))
devtools::install_github("josefinabernardo/gnomesims", force = TRUE)
library(gnomesims)
library(tidyverse)
dz_data <- gnome_mx_simulation(ct = seq(0,.1,.02), si = seq(0,.1,.02),
nloci = 100, ndz = 8000,
npgsloci = c(2, 5, 10, 15))
