data_noSI_long$variable <- factor(data_noSI_long$variable,
levels = c("Cultural Transmission Only",
"Sibling Interaction Only",
"Cultural Transmission - Combined Model",
"Sibling Interaction - Combined Model"))
# Create the plot
ggplot(data_noSI_long, aes(x = CT, y = value, color = variable)) +
geom_line(linewidth = 1.2) +  # Adjust line thickness
geom_point(size = 3) +   # Adjust point size
labs(x = "Cultural Transmission", y = "Power", color = "Parameter", shape = "Parameter") +  # Ensure both have the same label
scale_color_manual(values = c("red", "blue", "turquoise", "purple")) +
scale_shape_manual(values = c(16, 17, 18, 19)) +
theme_minimal()
paper_power %>%
filter(PGS == 0.1) %>%
ggplot(aes(x = g, y = b, fill = p1)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", p1),
color = ifelse(p1 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
paper_power %>%
filter(PGS == 0.1) %>%
ggplot(aes(x = g, y = b, fill = p2)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", p2),
color = ifelse(p2 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
paper_power %>%
filter(PGS == 0.1) %>%
ggplot(aes(x = g, y = b, fill = p3)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", p3),
color = ifelse(p3 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
paper_power %>%
filter(PGS == 0.1) %>%
ggplot(aes(x = g, y = b, fill = p4)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", p4),
color = ifelse(p4 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
# Create the plot for data_noCT
ggplot(data_noCT_long, aes(x = SI, y = value, color = variable, shape = variable)) +
geom_line(linewidth = 1.2) +  # Adjust line thickness
geom_point(size = 3) +   # Adjust point size
labs(x = "Sibling Interaction", y = "Power", color = "Parameter", shape = "Parameter") +  # Ensure both have the same label
scale_color_manual(values = c("red", "blue", "turquoise", "purple")) +
theme_minimal()
# Create the plot for data_noCT
ggplot(data_noCT_long, aes(x = SI, y = value, color = variable, shape = variable)) +
geom_line(linewidth = 1.2) +  # Adjust line thickness
geom_point(size = 3) +   # Adjust point size
labs(x = "Sibling Interaction", y = "Power", color = "Parameter", shape = "Parameter") +  # Ensure both have the same label
scale_color_manual(values = c("red", "blue", "turquoise", "purple")) +
scale_shape_manual(values = c(16, 17, 18, 19)) +
theme_minimal()
# Create the plot
ggplot(data_noSI_long, aes(x = CT, y = value, color = variable)) +
geom_line(linewidth = 1.2) +  # Adjust line thickness
geom_point(size = 3) +   # Adjust point size
labs(x = "Cultural Transmission", y = "Power", color = "Parameter", shape = "Parameter") +  # Ensure both have the same label
scale_color_manual(values = c("red", "blue", "turquoise", "purple")) +
scale_shape_manual(values = c(16, 17, 18, 19)) +
theme_minimal()
# Create the plot
ggplot(data_noSI_long, aes(x = CT, y = value, color = variable, shape = variable)) +
geom_line(linewidth = 1.2) +  # Adjust line thickness
geom_point(size = 3) +   # Adjust point size
labs(x = "Cultural Transmission", y = "Power", color = "Parameter", shape = "Parameter") +  # Ensure both have the same label
scale_color_manual(values = c("red", "blue", "turquoise", "purple")) +
scale_shape_manual(values = c(16, 17, 18, 19)) +
theme_minimal()
# Create the plot for data_noCT
ggplot(data_noCT_long, aes(x = SI, y = value, color = variable, shape = variable)) +
geom_line(linewidth = 1.2) +  # Adjust line thickness
geom_point(size = 3) +   # Adjust point size
labs(x = "Sibling Interaction", y = "Power", color = "Parameter", shape = "Parameter") +  # Ensure both have the same label
scale_color_manual(values = c("red", "blue", "turquoise", "purple")) +
scale_shape_manual(values = c(16, 17, 18, 19)) +
theme_minimal()
# Create the plot for data_noCT
ggplot(data_noCT_long, aes(x = SI, y = value, color = variable, shape = variable)) +
geom_line(linewidth = 1.2) +  # Adjust line thickness
geom_point(size = 3) +   # Adjust point size
labs(x = "Sibling Interaction", y = "Power", color = "Parameter", shape = "Parameter") +  # Ensure both have the same label
scale_color_manual(values = c("red", "blue", "turquoise", "purple")) +
scale_shape_manual(values = c(16, 17, 18, 19)) +
theme_minimal()
# Create the plot
ggplot(data_noSI_long, aes(x = CT, y = value, color = variable, shape = variable)) +
geom_line(linewidth = 1.2) +  # Adjust line thickness
geom_point(size = 3) +   # Adjust point size
labs(x = "Cultural Transmission", y = "Power", color = "Parameter", shape = "Parameter") +  # Ensure both have the same label
scale_color_manual(values = c("red", "blue", "turquoise", "purple")) +
scale_shape_manual(values = c(16, 17, 18, 19)) +
theme_minimal()
paper_power %>%
filter(PGS == 0.1) %>%
ggplot(aes(x = g, y = b, fill = p1)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", p1),
color = ifelse(p1 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
paper_power %>%
filter(PGS == 0.1) %>%
ggplot(aes(x = g, y = b, fill = p1)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", p1),
color = ifelse(p1 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
paper_power %>%
filter(PGS == 0.1) %>%
ggplot(aes(x = g, y = b, fill = p2)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", p2),
color = ifelse(p2 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
paper_power %>%
filter(PGS == 0.1) %>%
ggplot(aes(x = g, y = b, fill = p4)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", p4),
color = ifelse(p4 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
paper_power %>%
filter(PGS == 0.1) %>%
ggplot(aes(x = g, y = b, fill = p3)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", p3),
color = ifelse(p3 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
paper_power %>%
filter(PGS == 0.1) %>%
ggplot(aes(x = g, y = b, fill = p2)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", p2),
color = ifelse(p2 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
ggplot(data = full_mzdz_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Method)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("Gee" = "dotted", "OpenMx" = "solid")) +
jtools::theme_apa() +
theme(text = element_text(family = "serif")) +
scale_color_viridis_d(name = "variable")
# Create the plot
ggplot(data_noCT_long, aes(x = SI, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(title = NULL,
x = "Sibling Interaction",
y = "Power",
color = "Parameter") +
jtools::theme_apa() +
theme(text = element_text(family = "serif")) +
scale_color_viridis_d(name = "variable")
ggplot(data_noSI_long, aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(title = NULL,
x = "Cultural Transmission",
y = "Power",
color = "Parameter") +
jtools::theme_apa() +
theme(text = element_text(family = "serif")) +
scale_color_viridis_d(name = "variable")
# Create the plot
ggplot(data = full_mzdz_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Method)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("Gee" = "dotted", "OpenMx" = "solid")) +
jtools::theme_apa() +
theme(text = element_text(family = "serif")) +
scale_color_viridis_d(name = "variable")
# Create the plot
ggplot(data = full_mzdz_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Method)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("Gee" = "dotted", "OpenMx" = "solid")) +
jtools::theme_apa() +
theme_minimal()
ggplot(data = full_mx_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Sample)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("DZ" = "dotted", "MZ & DZ" = "solid")) +
theme_minimal()
# Create the plot
ggplot(data = full_mzdz_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Method)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("Gee" = "dotted", "OpenMx" = "solid")) +
jtools::theme_apa() +
theme_minimal()
full_mx_data %>%
full_mx_data %>%
filter(Sample == "MZ & DZ")
filter(full_mx_data, Sample == "MZ & DZ") %>%
filter(full_mx_data, Sample == "MZ & DZ")
filter(full_mzdz_data, Sample == "MZ & DZ") %>%
theme_minimal()
View(full_mx_data)
filter(full_mzdz_data, Sample == "MZ & DZ") %>%
ggplot(data = ., mapping = aes(x = Confounder, y = Power, color = Variable)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
theme_minimal()
ggplot(data = full_mx_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Sample)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("DZ" = "dotted", "MZ & DZ" = "solid")) +
scale_fill_manual("red", "blue") +
theme_minimal()
ggplot(data = full_mx_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Sample)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("DZ" = "dotted", "MZ & DZ" = "solid")) +
scale_fill_manual(c("red", "blue")) +
theme_minimal()
ggplot(data = full_mx_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Sample)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("DZ" = "dotted", "MZ & DZ" = "solid")) +
scale_color_manual(c("red", "blue")) +
theme_minimal()
ggplot(data = full_mx_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Sample)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("DZ" = "dotted", "MZ & DZ" = "solid")) +
scale_fill_discrete(c("red", "blue")) +
theme_minimal()
ggplot(data = full_mx_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Sample)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("DZ" = "dotted", "MZ & DZ" = "solid")) +
scale_color_manual(c("red", "blue")) +
theme_minimal()
ggplot(data = full_mx_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Sample)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("DZ" = "dotted", "MZ & DZ" = "solid")) +
scale_color_manual("red", "blue") +
theme_minimal()
ggplot(data = full_mx_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Sample)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("DZ" = "dotted", "MZ & DZ" = "solid")) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
# Create the plot
ggplot(data = full_mzdz_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Method)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("Gee" = "dotted", "OpenMx" = "solid")) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
filter(full_mzdz_data, Sample == "MZ & DZ") %>%
ggplot(data = ., mapping = aes(x = Confounder, y = Power, color = Variable)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
ggplot(data = full_mx_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Sample)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("DZ" = "dotted", "MZ & DZ" = "solid")) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
filter(full_mzdz_data, Sample == "MZ & DZ")
filter(full_mzdz_data, Sample == "MZ & DZ", Method = "OpenMx") %>%
ggplot(data = ., mapping = aes(x = Confounder, y = Power, color = Variable)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
filter(full_mzdz_data, Sample == "MZ & DZ", Method == "OpenMx") %>%
ggplot(data = ., mapping = aes(x = Confounder, y = Power, color = Variable)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
ggplot(data = full_mx_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Sample)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("DZ" = "dotted", "MZ & DZ" = "solid")) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
# Create the plot
ggplot(data = full_mzdz_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Method)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("Gee" = "dotted", "OpenMx" = "solid")) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
filter(full_mzdz_data, Sample == "MZ & DZ", Method == "OpenMx") %>%
ggplot(data = ., mapping = aes(x = Confounder, y = Power, color = Variable)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
ggplot(data = full_mx_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Sample)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("DZ" = "dotted", "MZ & DZ" = "solid")) +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
library(OpenMx)
library(gnomesims)
# Run function for detailed lots in running text
varya_data <- gnomesims::gnome_mx_simulation(a = sqrt(seq(.4,.8,.1)), ct = seq(0,.1,.01), si = seq(0,.1,.01),
nloci = 100, npgsloci = 10)
# Plotting components
sqrt(seq(.4,.8,.1))
# Plotting components
comp_plot_data <- data.frame(a = sqrt(seq(.4,.8,.1)), c = sqrt(.3), e = sqrt(.3))
comp_plot_data
plot(comp_plot_data)
# Plotting components
comp_plot_data <- data.frame(setting = 1:5, a = sqrt(seq(.4,.8,.1)), c = sqrt(.3), e = sqrt(.3))
plot(comp_plot_data)
?plot
# Plotting components
comp_plot_data <- data.frame(setting = 1:5, a = sqrt(seq(.4,1,.2)), c = sqrt(.3), e = sqrt(.3))
comp_plot_data
# Plotting components
comp_plot_data <- data.frame(setting = 1:4, a = sqrt(seq(.4,1,.2)), c = sqrt(.3), e = sqrt(.3))
comp_plot_data
plot(comp_plot_data$setting, comp_plot_data$a, type = "b", pch = "a", col = "blue", ylim = c(min(comp_plot_data$a, comp_plot_data$c, comp_plot_data$e), max(comp_plot_data$a, comp_plot_data$c, comp_plot_data$e)), xlab = "Setting", ylab = "Values", main = "Line Plot with A, C, E Symbols")
lines(comp_plot_data$setting, comp_plot_data$c, type = "b", pch = "c", col = "red")
lines(comp_plot_data$setting, comp_plot_data$e, type = "b", pch = "e", col = "green")
# Plotting components
comp_plot_data <- data.frame(setting = 1:4, a = sqrt(seq(.4,1,.2)), c = sqrt(.3), e = sqrt(.3), total = a+c+e)
# Standardizing the data
comp_plot_data$a_stand <- comp_plot_data$a / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$c_stand <- comp_plot_data$c / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$e_stand <- comp_plot_data$e / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
# Plot the standardized data
plot(comp_plot_data$setting, comp_plot_data$a_stand, type = "b", pch = "a", col = "blue", ylim = c(0, max(comp_plot_data$a_stand, comp_plot_data$c_stand, comp_plot_data$e_stand)), xlab = "Setting", ylab = "Standardized Values", main = "Standardized Line Plot with A, C, E Symbols")
lines(comp_plot_data$setting, comp_plot_data$c_stand, type = "b", pch = "c", col = "red")
lines(comp_plot_data$setting, comp_plot_data$e_stand, type = "b", pch = "e", col = "green")
# Plotting components
comp_plot_data <- data.frame(setting = 1:4, a = sqrt(seq(.4,1,.2)), c = sqrt(.3), e = sqrt(.3))
plot(comp_plot_data$setting, comp_plot_data$a, type = "b", pch = "a", col = "blue", ylim = c(min(comp_plot_data$a, comp_plot_data$c, comp_plot_data$e), max(comp_plot_data$a, comp_plot_data$c, comp_plot_data$e)), xlab = "Setting", ylab = "Values", main = "Line Plot with A, C, E Symbols")
lines(comp_plot_data$setting, comp_plot_data$c, type = "b", pch = "c", col = "red")
# Standardizing the data
comp_plot_data$a_stand <- comp_plot_data$a / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$c_stand <- comp_plot_data$c / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$e_stand <- comp_plot_data$e / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
# Plot the standardized data
plot(comp_plot_data$setting, comp_plot_data$a_stand, type = "b", pch = "a", col = "blue", ylim = c(0, max(comp_plot_data$a_stand, comp_plot_data$c_stand, comp_plot_data$e_stand)), xlab = "Setting", ylab = "Standardized Values", main = "Standardized Line Plot with A, C, E Symbols")
lines(comp_plot_data$setting, comp_plot_data$c_stand, type = "b", pch = "c", col = "red")
# Plot the standardized data
plot(comp_plot_data$setting, comp_plot_data$a_stand, type = "b", pch = "a", col = "blue", ylim = c(0, max(comp_plot_data$a_stand, comp_plot_data$c_stand, comp_plot_data$e_stand)), xlab = "Setting", ylab = "Standardized Values"
# Plot the standardized data
plot(comp_plot_data$setting, comp_plot_data$a_stand, type = "b", pch = "a", col = "blue", ylim = c(0, max(comp_plot_data$a_stand, comp_plot_data$c_stand, comp_plot_data$e_stand)), xlab = "Setting", ylab = "Standardized Values")
# Standardizing the data
comp_plot_data$a_stand <- comp_plot_data$a / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$c_stand <- comp_plot_data$c / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$e_stand <- comp_plot_data$e / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
# Plot the standardized data
plot(comp_plot_data$setting, comp_plot_data$a_stand, type = "b", pch = "a", col = "blue", ylim = c(0, max(comp_plot_data$a_stand, comp_plot_data$c_stand, comp_plot_data$e_stand)), xlab = "Setting", ylab = "Standardized Values")
lines(comp_plot_data$setting, comp_plot_data$c_stand, type = "b", pch = "c", col = "red")
plot(comp_plot_data$setting, comp_plot_data$a, type = "b", pch = "a", col = "blue", ylim = c(0, max(comp_plot_data$a, comp_plot_data$c)), xlab = "Setting", ylab = "Standardized Values")
lines(comp_plot_data$setting, comp_plot_data$c, type = "b", pch = "c", col = "red")
# Plot the standardized data
plot(comp_plot_data$setting, comp_plot_data$a_stand, type = "b", pch = "a", col = "blue", ylim = c(0, max(comp_plot_data$a_stand, comp_plot_data$c_stand)), xlab = "Setting", ylab = "Standardized Values")
lines(comp_plot_data$setting, comp_plot_data$c_stand, type = "b", pch = "c", col = "red")
# Plot the standardized data
plot(comp_plot_data$setting, comp_plot_data$a_stand, type = "b", pch = "a", col = "blue", ylim = c(0, max(comp_plot_data$a_stand, comp_plot_data$c_stand)),
xlab = "Setting", ylab = "Standardized Values", xaxt = "n")
lines(comp_plot_data$setting, comp_plot_data$c_stand, type = "b", pch = "c", col = "red")
# Plot the standardized data
plot(as.integer(comp_plot_data$setting), comp_plot_data$a_stand, type = "b", pch = "a", col = "blue", ylim = c(0, max(comp_plot_data$a_stand, comp_plot_data$c_stand)),
xlab = "Setting", ylab = "Standardized Values")
# Plot the standardized data
plot(comp_plot_data$setting, comp_plot_data$a_stand, type = "b", pch = "a", col = "blue", ylim = c(0, max(comp_plot_data$a_stand, comp_plot_data$c_stand)),
xlab = "Setting", ylab = "Standardized Values")
lines(comp_plot_data$setting, comp_plot_data$c_stand, type = "b", pch = "c", col = "red")
# Plotting components
comp_plot_data <- data.frame(setting = 1:4, a = sqrt(seq(.4,1,.2)), c = sqrt(.3), e = sqrt(.3))
# Creating and standardizing the data
comp_plot_data$a_stand <- comp_plot_data$a / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$c_stand <- comp_plot_data$c / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
comp_plot_data$e_stand <- comp_plot_data$e / (comp_plot_data$a + comp_plot_data$c + comp_plot_data$e)
# Plots
par(mfrow = c(1, 2))
plot(comp_plot_data$setting, comp_plot_data$a, type = "b", pch = "a", col = "blue", ylim = c(0, max(comp_plot_data$a, comp_plot_data$c)), xlab = "Setting", ylab = "Unstandardized Values")
lines(comp_plot_data$setting, comp_plot_data$c, type = "b", pch = "c", col = "red")
plot(comp_plot_data$setting, comp_plot_data$a_stand, type = "b", pch = "a", col = "blue", ylim = c(0, max(comp_plot_data$a_stand, comp_plot_data$c_stand)),
xlab = "Setting", ylab = "Standardized Values")
lines(comp_plot_data$setting, comp_plot_data$c_stand, type = "b", pch = "c", col = "red")
par(mfrow = c(1, 1))
# Plots
par(mfrow = c(1, 2))
plot(comp_plot_data$setting, comp_plot_data$a, type = "b", pch = "a", col = "blue", ylim = c(0, 1), xlab = "Setting", ylab = "Unstandardized Values")
lines(comp_plot_data$setting, comp_plot_data$c, type = "b", pch = "c", col = "red")
plot(comp_plot_data$setting, comp_plot_data$a_stand, type = "b", pch = "a", col = "blue", ylim = c(0, 1),
xlab = "Setting", ylab = "Standardized Values")
lines(comp_plot_data$setting, comp_plot_data$c_stand, type = "b", pch = "c", col = "red")
par(mfrow = c(1, 1))
plot(comp_plot_data$setting, comp_plot_data$a, type = "b", pch = "a",
col = "blue", ylim = c(0, 1), xlab = "Setting",
ylab = "Unstandardized Values", xaxt = "n")
lines(comp_plot_data$setting, comp_plot_data$c, type = "b", pch = "c", col = "red")
plot(comp_plot_data$setting, comp_plot_data$a_stand, type = "b", pch = "a", col = "blue", ylim = c(0, 1),
xlab = "Setting", ylab = "Standardized Values")
lines(comp_plot_data$setting, comp_plot_data$c_stand, type = "b", pch = "c", col = "red")
par(mfrow = c(1, 1))
# Plots
par(mfrow = c(1, 2))
plot(comp_plot_data$setting, comp_plot_data$a, type = "b", pch = "a",
col = "blue", ylim = c(0, 1), xlab = "Setting",
ylab = "Unstandardized Values", xaxt = "n")
lines(comp_plot_data$setting, comp_plot_data$c, type = "b", pch = "c", col = "red")
plot(comp_plot_data$setting, comp_plot_data$a_stand, type = "b", pch = "a", col = "blue", ylim = c(0, 1),
xlab = "Setting", ylab = "Standardized Values")
lines(comp_plot_data$setting, comp_plot_data$c_stand, type = "b", pch = "c", col = "red")
plot(comp_plot_data$setting, comp_plot_data$a_stand, type = "b", pch = "a",
col = "blue", ylim = c(0, 1), xlab = "Setting",
ylab = "Standardized Values", xaxt = "n")
plot(comp_plot_data$setting, comp_plot_data$a, type = "b", pch = "a",
col = "blue", ylim = c(0, 1), xlab = "Setting",
ylab = "Unstandardized Values", xaxt = "n")
lines(comp_plot_data$setting, comp_plot_data$c, type = "b", pch = "c", col = "red")
plot(comp_plot_data$setting, comp_plot_data$a_stand, type = "b", pch = "a",
col = "blue", ylim = c(0, 1), xlab = "Setting",
ylab = "Standardized Values", xaxt = "n")
# Plots
par(mfrow = c(1, 2))
plot(comp_plot_data$setting, comp_plot_data$a, type = "b", pch = "a",
col = "blue", ylim = c(0, 1), xlab = "Setting",
ylab = "Unstandardized Values", xaxt = "n")
lines(comp_plot_data$setting, comp_plot_data$c, type = "b", pch = "c", col = "red")
plot(comp_plot_data$setting, comp_plot_data$a_stand, type = "b", pch = "a",
col = "blue", ylim = c(0, 1), xlab = "Setting",
ylab = "Standardized Values", xaxt = "n")
lines(comp_plot_data$setting, comp_plot_data$c_stand, type = "b", pch = "c", col = "red")
par(mfrow = c(1, 1))
lines(comp_plot_data$setting, comp_plot_data$c_stand, type = "b", pch = "c", col = "red")
# Plots
par(mfrow = c(1, 2))
plot(comp_plot_data$setting, comp_plot_data$a, type = "b", pch = "a",
col = "blue", ylim = c(0, 1), xlab = "Setting",
ylab = "Unstandardized Values", xaxt = "n")
axis(1, at = comp_plot_data$setting)
lines(comp_plot_data$setting, comp_plot_data$c, type = "b", pch = "c", col = "red")
plot(comp_plot_data$setting, comp_plot_data$a_stand, type = "b", pch = "a",
col = "blue", ylim = c(0, 1), xlab = "Setting",
ylab = "Standardized Values", xaxt = "n")
lines(comp_plot_data$setting, comp_plot_data$c_stand, type = "b", pch = "c", col = "red")
axis(1, at = comp_plot_data$setting)
