Model_1b_out <- mxRun(Model_1b, intervals=TRUE)
mxCompare(Model_1out, Model_1b_out)
Model_1g <- omxSetParameters(Model_1out, labels=c('g1'), free=FALSE, values=c(0))
Model_1g_out <- mxRun(Model_1g, intervals=TRUE)
mxCompare(Model_1out, Model_1g_out)
Model_1bg <- omxSetParameters(Model_1out, labels=c('g1','b1'), free=FALSE, values=c(0))
Model_1bg_out <- mxRun(Model_1bg, intervals=TRUE)
mxCompare(Model_1out, Model_1bg_out)
#
mxRefModels(Model_1out, run=TRUE) -> sat_1out
mxCompare(sat_1out, Model_1out)
#
#
# -----------------------------------------------   vars
varnames=c('pht1','pht2')#
#
# the model to calculate expected summary statistics
# this is the twin model phenotypic
# [1] "pht1"   "pht2"   "pgsm"   "pgsf"   "pgst1"  "pgsnt1" "pgst2"  "pgsnt2" "pgsmf"  "mpgst"
# [1] "pgsm"  "pgsf"  "pgst1" "pgst2" "pht1"  "pht2"  "pgsmf" "mpgst"
# a model the data, the fit function (MZ)
MZmodel <- mxModel("MZ",
#
# Matrix expMean for expected mean vector for MZ and DZ twins
mxMatrix(type="Full", nrow=1, ncol=4, free=FALSE, labels=c("data.pgst1","data.pgst2","data.pgsm","data.pgsf"), name="pred"),
mxMatrix(type="Full", nrow=1, ncol=4, free=c(TRUE,TRUE,TRUE,TRUE), values=c(0,0,0,0),
labels=c("bpgst","bpgsb","bpgsg","bpgsg"), name="bs1"),
mxMatrix(type="Full", nrow=1, ncol=4, free=TRUE, values=c(0,0,0,0),
labels=c("bpgsb","bpgst","bpgsg","bpgsg"), name="bs2"),
mxMatrix(type="Full", nrow=1, ncol=1,
free=c(TRUE),values=c(0),labels=c("b0"),
name="Int"),
mxAlgebra(expression=cbind(b0+pred%*%t(bs1), b0+pred%*%t(bs2)), name='expMean'),
mxData(observed=phdatmz_e, type="raw"),
mxExpectationNormal(covariance="ACE.expCovMZ",
means = "expMean", varnames),
mxFitFunctionML()
)
# a model the data, the fit function (DZ)
DZmodel <- mxModel("DZ",
#
# Matrix expMean for expected mean vector for MZ and DZ twins
mxMatrix(type="Full", nrow=1, ncol=4, free=FALSE, labels=c("data.pgst1","data.pgst2","data.pgsm","data.pgsf"), name="pred"),
mxMatrix(type="Full", nrow=1, ncol=4, free=c(TRUE,TRUE,TRUE,TRUE), values=c(0,0,0,0),
labels=c("bpgst","bpgsb","bpgsg","bpgsg"), name="bs1"),
mxMatrix(type="Full", nrow=1, ncol=4, free=TRUE, values=c(0,0,0,0),
labels=c("bpgsb","bpgst","bpgsg","bpgsg"), name="bs2"),
mxMatrix(type="Full", nrow=1, ncol=1,
free=c(TRUE),values=c(0),labels=c("b0"),
name="Int"),
mxAlgebra(expression=cbind(b0+pred%*%t(bs1), b0+pred%*%t(bs2)), name='expMean'),
mxData(observed=phdatdz_e, type="raw"),
mxExpectationNormal(covariance="ACE.expCovDZ",
means = "expMean", varnames),
mxFitFunctionML()
)
varnames=c('pht1','pht2')#
#
# the model to calculate expected summary statistics
# this is the twin model phenotypic
# [1] "pht1"   "pht2"   "pgsm"   "pgsf"   "pgst1"  "pgsnt1" "pgst2"  "pgsnt2" "pgsmf"  "mpgst"
# [1] "pgsm"  "pgsf"  "pgst1" "pgst2" "pht1"  "pht2"  "pgsmf" "mpgst"
# a model the data, the fit function (MZ)
MZmodel <- mxModel("MZ",
#
# Matrix expMean for expected mean vector for MZ and DZ twins
mxMatrix(type="Full", nrow=1, ncol=4, free=FALSE, labels=c("data.pgst1","data.pgst2","data.pgsm","data.pgsf"), name="pred"),
mxMatrix(type="Full", nrow=1, ncol=4, free=c(TRUE,TRUE,TRUE,TRUE), values=c(0,0,0,0),
labels=c("bpgst","bpgsb","bpgsg","bpgsg"), name="bs1"),
mxMatrix(type="Full", nrow=1, ncol=4, free=TRUE, values=c(0,0,0,0),
labels=c("bpgsb","bpgst","bpgsg","bpgsg"), name="bs2"),
mxMatrix(type="Full", nrow=1, ncol=1,
free=c(TRUE),values=c(0),labels=c("b0"),
name="Int"),
mxAlgebra(expression=cbind(b0+pred%*%t(bs1), b0+pred%*%t(bs2)), name='expMean'),
mxData(observed=phdatmz_e, type="raw"),
mxExpectationNormal(covariance="SAT.expCovMZ",
means = "expMean", varnames),
mxFitFunctionML()
)
# a model the data, the fit function (DZ)
DZmodel=mxModel("DZ",
#
# Matrix expMean for expected mean vector for MZ and DZ twins
mxMatrix(type="Full", nrow=1, ncol=4, free=FALSE, labels=c("data.pgst1","data.pgst2","data.pgsm","data.pgsf"), name="pred"),
mxMatrix(type="Full", nrow=1, ncol=4, free=c(TRUE,TRUE,TRUE,TRUE), values=c(0,0,0,0),
labels=c("bpgst","bpgsb","bpgsg","bpgsg"), name="bs1"),
mxMatrix(type="Full", nrow=1, ncol=4, free=TRUE, values=c(0,0,0,0),
labels=c("bpgsb","bpgst","bpgsg","bpgsg"), name="bs2"),
mxMatrix(type="Full", nrow=1, ncol=1,
free=c(TRUE),values=c(0),labels=c("b0"),
name="Int"),
mxAlgebra(expression=cbind(b0+pred%*%t(bs1), b0+pred%*%t(bs2)), name='expMean'),
mxData(observed=phdatdz_e, type="raw"),
mxExpectationNormal(covariance="SAT.expCovDZ",
means = "expMean", varnames),
mxFitFunctionML()
)
varnames <- c('pht1','pht2')#
#
# the model to calculate expected summary statistics
# this is the twin model phenotypic
# [1] "pht1"   "pht2"   "pgsm"   "pgsf"   "pgst1"  "pgsnt1" "pgst2"  "pgsnt2" "pgsmf"  "mpgst"
# [1] "pgsm"  "pgsf"  "pgst1" "pgst2" "pht1"  "pht2"  "pgsmf" "mpgst"
nphen1 <- 1
nphen2 <- 2
DZModel  <-  mxModel("DZonly",
#
# Matrices a, c, and e to store the a, c, and e path coefficients
mxMatrix(type="Stand", nrow=nphen2, ncol=nphen2,
free=c(TRUE), values=c(.25),
labels=c("rdz"),name="Rdz"),
mxMatrix(type="Diag", nrow=nphen2, ncol=nphen2,
free=c(TRUE), values=c(.7),
labels=c("sd","sd"),name="SD"),
#
#
# Matrix expCovMZ for expected covariance matrix for DZ twins
#
mxAlgebra( expression=
SD%*%Rdz%*%SD,,name="expCovDZ"),
#
# Matrix expMean for expected mean vector for DZ twins
#
mxMatrix(type="Full", nrow=1, ncol=4, free=FALSE, labels=c("data.pgst1","data.pgst2","data.pgsm","data.pgsf"), name="pred"),
mxMatrix(type="Full", nrow=1, ncol=4, free=c(TRUE,TRUE,TRUE,TRUE), values=c(0,0,0,0),
labels=c("bpgst","bpgsb","bpgsg","bpgsg"), name="bs1"),
mxMatrix(type="Full", nrow=1, ncol=4, free=TRUE, values=c(0,0,0,0),
labels=c("bpgsb","bpgst","bpgsg","bpgsg"), name="bs2"),
mxMatrix(type="Full", nrow=1, ncol=1,
free=c(TRUE),values=c(0),labels=c("b0"),
name="B0"),
mxAlgebra(expression=cbind(B0+pred%*%t(bs1), B0+pred%*%t(bs2)), name='expMean'),
mxData(observed=phdatdz_e, type="raw"),
mxExpectationNormal(covariance="expCovDZ",
means ="expMean", varnames),
mxFitFunctionML()
)
# Model_4 <-  mxModel(name="DZ1SAT", DZModel)
Model_4 <-  mxModel(DZModel)
# fit the model
Model_4out <- mxRun(Model_4)
Model_4g <- omxSetParameters(Model_4out, labels='bpgsg', values=0, free=FALSE)
Model_4g_out = mxRun(Model_4g)
#
Model_4b=omxSetParameters(Model_4out, labels='bpgsb', values=0, free=FALSE)
Model_4b_out <- mxRun(Model_4b)
# "bpgsb","bpgsg"
Model_4bg <- omxSetParameters(Model_4out, labels=c('bpgsb','bpgsg'), free=FALSE, values=c(0))
Model_4bg_out <- mxRun(Model_4bg)
# Power
ncp_tmp <- c(
mxCompare(Model_1b_out, Model_1bg_out)[2,7],
mxCompare(Model_1g_out, Model_1bg_out)[2,7],
mxCompare(Model_1out, Model_1g_out)[2,7],
mxCompare(Model_1out, Model_1b_out)[2,7],
mxCompare(Model_4b_out, Model_4bg_out)[2,7],
mxCompare(Model_4g_out, Model_4bg_out)[2,7],
mxCompare(Model_4out, Model_4g_out)[2,7],
mxCompare(Model_4out, Model_4b_out)[2,7]
)
ncp_power_tmp <- sapply(ncp_tmp, function(ncp) {
gnome_power(alpha, 1, ncp)
})
# Estimates
estimates_tmp <- c(
summary(Model_1b_out)$parameters[8, "Estimate"], # g1 - CT Model 1 CT only
summary(Model_1g_out)$parameters[8,'Estimate'], # b1 - SI Model 1 SI only
summary(Model_1out)$parameters[9,'Estimate'], # g1 - CT Model 1 both
summary(Model_1out)$parameters[8,'Estimate'], # b1 - SI Model 1 both
summary(Model_4b_out)$parameters[4, 'Estimate'], # bpgsg - CT Model 4 CT only
summary(Model_4g_out)$parameters[4, 'Estimate'], # bpgsb - SI Model 4 SI only
summary(Model_4out)$parameters[5, 'Estimate'], # bpgsg - CT Model 4
summary(Model_4out)$parameters[4, 'Estimate'] # bpgsb - SI Model 4
)
mxkeep[counter_within, ] <- c(ncp_power_tmp, estimates_tmp)
}
# For mxkeep
jpow <- 1:8
jest <- 9:16
row_index <- counter_overall - n_set + 1
if (assortm_logical == TRUE) {
# Execute these lines when assortm_logical is TRUE
final_mx_estimates[row_index : counter_overall, 1:10] <- setkeep[, 1:10]
final_mx_power[row_index : counter_overall, 1:10] <- setkeep[, 1:10]
final_mx_estimates[row_index : counter_overall, 11:18] <- round(mxkeep[, jest], 3)
final_mx_power[row_index : counter_overall, 11:18] <- round(mxkeep[, jpow], 3)
} else {
# Execute these lines when assortm_logical is FALSE
final_mx_estimates[row_index : counter_overall, 1:11] <- setkeep[, 1:11]
final_mx_power[row_index : counter_overall, 1:11] <- setkeep[, 1:11]
final_mx_estimates[row_index : counter_overall, 12:19] <- round(mxkeep[, jest], 3)
final_mx_power[row_index : counter_overall, 12:19] <- round(mxkeep[, jpow], 3)
}
counter_within = 0 # reset set counter for each PGS setting
}
# Re-name columns
ifelse(assortm_logical,
setnames <- c('nmz','ndz','a','c','e','g','b','x','PGS','A'),
setnames <- c('nmz','ndz','a','c','e','g','b','x','PGS','A','assortm'))
colnames(final_mx_estimates) <- c(setnames, paste0("e", 1:8))
colnames(final_mx_power) <- c(setnames, paste0("p", 1:8))
# Use effect size function on the data sets
final_mx_estimates <- final_mx_estimates %>%
mutate(Smz = gnome_effect(a = a, c = c, e = e, g = g, b = b)$mz,
Sdz = gnome_effect(a = a, c = c, e = e, g = g, b = b)$dz)
final_mx_power <- final_mx_power %>%
mutate(Smz = gnome_effect(a = a, c = c, e = e, g = g, b = b)$mz,
Sdz = gnome_effect(a = a, c = c, e = e, g = g, b = b)$dz)
return(list(power = final_mx_power, params = final_mx_estimates))
}
sibonly_data <- gnome_mx_sibonly(ct = seq(0,.1,.05), si = seq(0,.1,.05),
nloci = 100, npgsloci = 10)
sibonly_power <- sibonly_data$power
detach("package:gnomesims", unload = TRUE)
# Load package
devtools::install_github("josefinabernardo/gnomesims", force = TRUE)
library(gnomesims)
# Results Sibling Mean
sibmean_data <- gnomesims::gnome_mx_simulation(ct = seq(0,.1,.05), si = seq(0,.1,.05),
nloci = 100, npgsloci = 10)
sibmean_power <- sibmean_data$power
sibmean_power$si_method <- "Sibling Mean"
sibonly_power$si_method <- "Sibling Only"
View(sibmean_power)
simethod_data %>%
ggplot(aes(x = g, y = b, fill = p1)) +
geom_tile() +
facet_wrap(~si_method) +
geom_text(aes(label = sprintf("%.2f", p1),
color = ifelse(p1 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
simethod_data <- rbind(sibmean_power, sibonly_power)
simethod_data %>%
ggplot(aes(x = g, y = b, fill = p1)) +
geom_tile() +
facet_wrap(~si_method) +
geom_text(aes(label = sprintf("%.2f", p1),
color = ifelse(p1 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
simethod_data %>%
ggplot(aes(x = g, y = b, fill = p2)) +
geom_tile() +
facet_wrap(~si_method) +
geom_text(aes(label = sprintf("%.2f", p2),
color = ifelse(p2 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
simethod_data %>%
ggplot(aes(x = g, y = b, fill = p3)) +
geom_tile() +
facet_wrap(~si_method) +
geom_text(aes(label = sprintf("%.2f", p3),
color = ifelse(p3 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
simethod_data %>%
ggplot(aes(x = g, y = b, fill = p4)) +
geom_tile() +
facet_wrap(~si_method) +
geom_text(aes(label = sprintf("%.2f", p4),
color = ifelse(p4 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
# Test function
gnomesims::gnome_mx_simulation(ct = .1, si = .1, nloci = 100, npgsloci = 10,
assortm = 0.9)
simethod_data %>%
ggplot(aes(x = g, y = b, fill = p8)) +
geom_tile() +
facet_wrap(~si_method) +
geom_text(aes(label = sprintf("%.2f", p8),
color = ifelse(p8 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
simethod_data %>%
ggplot(aes(x = g, y = b, fill = p5)) +
geom_tile() +
facet_wrap(~si_method) +
geom_text(aes(label = sprintf("%.2f", p5),
color = ifelse(p5 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
simethod_data %>%
ggplot(aes(x = g, y = b, fill = p6)) +
geom_tile() +
facet_wrap(~si_method) +
geom_text(aes(label = sprintf("%.2f", p6),
color = ifelse(p6 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
simethod_data %>%
ggplot(aes(x = g, y = b, fill = p7)) +
geom_tile() +
facet_wrap(~si_method) +
geom_text(aes(label = sprintf("%.2f", p7),
color = ifelse(p7 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
detach("package:gnomesims", unload = TRUE)
# Load package
devtools::install_github("josefinabernardo/gnomesims", force = TRUE)
library(gnomesims)
# Full data set
am_data <- gnomesims::gnome_mx_simulation(ct = seq(0,.1,.05), si = seq(0,.1,.05),
nloci = 100, npgsloci = 10,
assortm = seq(0,.4,.1))
# Create seperate data sets for processing
am_power <- am_data$power
am_estimates <- am_data$params
# Write to .csv files
write.csv(am_estimates, file = "am_mx_estimates.csv", row.names = TRUE)
write.csv(am_power, file = "am_mx_power.csv", row.names = TRUE)
power_am <- read.csv("am_mx_power.csv")
library(tidyverse)
power_am %>%
ggplot(aes(x = g, y = b, fill = p1)) +
geom_tile() +
facet_wrap(~assortm) +
geom_text(aes(label = sprintf("%.2f", p1),
color = ifelse(p1 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
power_am %>%
ggplot(aes(x = g, y = b, fill = p2)) +
geom_tile() +
facet_wrap(~assortm) +
geom_text(aes(label = sprintf("%.2f", p2),
color = ifelse(p2 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
power_am %>%
ggplot(aes(x = g, y = b, fill = p3)) +
geom_tile() +
facet_wrap(~assortm) +
geom_text(aes(label = sprintf("%.2f", p3),
color = ifelse(p3 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
power_am %>%
ggplot(aes(x = g, y = b, fill = p4)) +
geom_tile() +
facet_wrap(~assortm) +
geom_text(aes(label = sprintf("%.2f", p4),
color = ifelse(p4 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
write.csv(simethod_data, file = "simethod_data.csv", row.names = TRUE)
simethod_data <- read.csv("simethod_data.csv")
View(simethod_data)
simethod_data %>%
ggplot(aes(x = g, y = b, fill = p5)) +
geom_tile() +
facet_wrap(~si_method) +
geom_text(aes(label = sprintf("%.2f", p5),
color = ifelse(p5 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
simethod_data %>%
ggplot(aes(x = g, y = b, fill = p6)) +
geom_tile() +
facet_wrap(~si_method) +
geom_text(aes(label = sprintf("%.2f", p6),
color = ifelse(p6 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
simethod_data %>%
ggplot(aes(x = g, y = b, fill = p7)) +
geom_tile() +
facet_wrap(~si_method) +
geom_text(aes(label = sprintf("%.2f", p7),
color = ifelse(p7 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
simethod_data %>%
ggplot(aes(x = g, y = b, fill = p8)) +
geom_tile() +
facet_wrap(~si_method) +
geom_text(aes(label = sprintf("%.2f", p8),
color = ifelse(p8 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
power_am <- read.csv("am_mx_power.csv")
library(tidyverse)
power_am %>%
ggplot(aes(x = g, y = b, fill = p1)) +
geom_tile() +
facet_wrap(~assortm) +
geom_text(aes(label = sprintf("%.2f", p1),
color = ifelse(p1 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
power_am %>%
ggplot(aes(x = g, y = b, fill = p2)) +
geom_tile() +
facet_wrap(~assortm) +
geom_text(aes(label = sprintf("%.2f", p2),
color = ifelse(p2 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
power_am %>%
ggplot(aes(x = g, y = b, fill = p3)) +
geom_tile() +
facet_wrap(~assortm) +
geom_text(aes(label = sprintf("%.2f", p3),
color = ifelse(p3 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
power_am %>%
ggplot(aes(x = g, y = b, fill = p4)) +
geom_tile() +
facet_wrap(~assortm) +
geom_text(aes(label = sprintf("%.2f", p4),
color = ifelse(p4 < 0.5, "white", "black")),  # Dynamic text color
size = 3) +
scale_fill_gradient(low = "red", high = "blue") +  # Two-colored gradient
scale_color_identity() +  # Use identity scale for text color (white/black)
labs(x = "Cultural Transmission", y = "Sibling Interaction", fill = "Power") +
theme_minimal()
library(OpenMx)
devtools::install_github("josefinabernardo/gnomesims", force = TRUE)
library(gnomesims)
# Results Sibling Mean
dezeeuw_data <- gnomesims::gnome_mx_simulation(a = sqrt(.74), c = sqrt(.08),
e = sqrt(.18), nmz = 2451, ndz = 4569, nloci = 100,
npgsloci = 12, ct = seq(0,.12,.01), si = seq(0,.12,.01))
setwd("~/Documents/GitHub/covAC-simulation-study-2024")
# Create seperate data sets for processing
dezeeuw_power <- dezeeuw_data$power
dezeeuw_estimates <- dezeeuw_data$params
# Write to .csv files
write.csv(dezeeuw_estimates, file = "dezeeuw_estimates.csv", row.names = TRUE)
write.csv(dezeeuw_power, file = "dezeeuw_power.csv", row.names = TRUE)
dezeeuw_power <- read.csv("dezeeuw_power.csv")
dezeeuw_data %>%
filter(CT == SI) %>%
select(CT, SI, p1, p2, p3, p4, Smz)
library(tidyverse)
dezeeuw_data %>%
filter(CT == SI) %>%
select(CT, SI, p1, p2, p3, p4, Smz)
dezeeuw_power %>%
filter(CT == SI) %>%
select(CT, SI, p1, p2, p3, p4, Smz)
dezeeuw_power %>%
filter(CT == SI) %>%
select(g, b, p1, p2, p3, p4, Smz, Sdz)
dezeeuw_power %>%
filter(g == b) %>%
select(g, b, p1, p2, p3, p4, Smz, Sdz)
