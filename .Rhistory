)
Model_3 <-  mxModel("twinSAT", SAT1, MZmodel, DZmodel, mxFitFunctionMultigroup( c("MZ","DZ") )
#               mxAlgebra(MZ.objective + DZ.objective, name="minus2loglikelihood"),
#               mxFitFunctionAlgebra("minus2loglikelihood")
)
# fit the model
Model_3out <- mxRun(Model_3)
summary(Model_3out)
#
# ---------------------------------------------------------- def vars DZ only
# sat
#
# -----------------------------------------------   defvars . no backgroud ACE dz only
varnames=c('pht1','pht2')#
#
# the model to calculate expected summary statistics
# this is the twin model phenotypic
# [1] "pht1"   "pht2"   "pgsm"   "pgsf"   "pgst1"  "pgsnt1" "pgst2"  "pgsnt2" "pgsmf"  "mpgst"
# [1] "pgsm"  "pgsf"  "pgst1" "pgst2" "pht1"  "pht2"  "pgsmf" "mpgst"
nphen1=1
nphen2=2
DZModel  = mxModel("DZonly",
#
# Matrices a, c, and e to store the a, c, and e path coefficients
mxMatrix(type="Stand", nrow=nphen2, ncol=nphen2,
free=c(T), values=c(.25),
label=c("rdz"),name="Rdz"),
mxMatrix(type="Diag", nrow=nphen2, ncol=nphen2,
free=c(T), values=c(.7),
label=c("sd","sd"),name="SD"),
#
#
# Matrix expCovMZ for expected covariance matrix for DZ twins
#
mxAlgebra( expression=
SD%*%Rdz%*%SD,,name="expCovDZ"),
#
# Matrix expMean for expected mean vector for DZ twins
#
mxMatrix(type="Full", nrow=1, ncol=4, free=F, labels=c("data.pgst1","data.pgst2","data.pgsm","data.pgsf"), name="pred"),
mxMatrix(type="Full", nrow=1, ncol=4, free=c(T,T,T,T), values=c(0,0,0,0),
labels=c("bpgst","bpgsb","bpgsg","bpgsg"), name="bs1"),
mxMatrix(type="Full", nrow=1, ncol=4, free=T, values=c(0,0,0,0),
labels=c("bpgsb","bpgst","bpgsg","bpgsg"), name="bs2"),
mxMatrix(type="Full", nrow=1, ncol=1,
free=c(T),values=c(0),label=c("b0"),
name="B0"),
mxAlgebra(expression=cbind(B0+pred%*%t(bs1), B0+pred%*%t(bs2)), name='expMean'),
mxData(observed=phdatdz_e, type="raw"),
mxExpectationNormal(covariance="expCovDZ",
means ="expMean", varnames),
mxFitFunctionML()
)
# Model_4 <-  mxModel(name="DZ1SAT", DZModel)
Model_4 <-  mxModel(DZModel)
# fit the model
Model_4out <- mxRun(Model_4)
summary(Model_4out)
#
# -------------------------------------------------------------------------------
#
#
#
#
Model_2g=omxSetParameters(Model_2out, labels='bpgsg', value=0, free=F)
Model_2g_out = mxRun(Model_2g)
#
Model_2b=omxSetParameters(Model_2out, labels='bpgsb', value=0, free=F)
Model_2b_out = mxRun(Model_2b)
# "bpgsb","bpgsg"
Model_2bg = omxSetParameters(Model_2out, labels=c('bpgsb','bpgsg'), free=F, values=c(0))
Model_2bg_out <- mxRun(Model_2bg)
#
ncp1bg=mxCompare(Model_1out, Model_1bg_out)[2,7]
pw1bg=powchi(alpha, 2, ncp1bg)
mxkeep[ii,1:2]=c(ncp1bg,pw1bg) # openmx results
#
ncp1g=mxCompare(Model_1out, Model_1g_out)[2,7]
pw1g=powchi(alpha,1,ncp1g)
mxkeep[ii,3:4]=c(ncp1g,pw1g) # openmx results
#
ncp1b=mxCompare(Model_1out, Model_1b_out)[2,7]
pw1b=powchi(alpha,1,ncp1b)
mxkeep[ii,5:6]=c(ncp1b,pw1b) # openmx results
#
ncp2bg=mxCompare(Model_2out, Model_2bg_out)[2,7]
pw2bg=powchi(alpha, 2, ncp2bg)
mxkeep[ii,7:8]=c(ncp2bg,pw2bg) # openmx results
#
ncp2g=mxCompare(Model_2out, Model_2g_out)[2,7]
pw2g=powchi(alpha,1,ncp2g)
mxkeep[ii,9:10]=c(ncp2g,pw2g) # openmx results
#
ncp2b=mxCompare(Model_2out, Model_2b_out)[2,7]
pw2b=powchi(alpha,1,ncp2b)
mxkeep[ii,11:12]=c(ncp2b,pw2b) # openmx results
#
}}}
}}}
#summary(egeeM3mzdzL)$coefficients
#anova(egeeM3mzdzL, egeeM1mzdzL)
#anova(egeeM3mzdzL, egeeM2mzdzL)
#
round(reskeep[,ipow],3)
round(mxkeep,3)
# COMPARE THESE RESULTS TO THE RESULTS FROM CONOR's ORIGINAL SCRIPT
cbind(setkeep, round(reskeep[,ipow],3))
# COMPARE THESE RESULTS TO THE RESULTS FROM CONOR's ORIGINAL SCRIPT
cbind(setkeep[1:10], round(reskeep[,ipow],3))
setkeep[1:10]
# COMPARE THESE RESULTS TO THE RESULTS FROM CONOR's ORIGINAL SCRIPT
cbind(setkeep[,1:10], round(reskeep[,ipow],3))
cbind(setkeep[,1:10], round(reskeep[,iest],3))
c(seq(1,27,3))
iest <- c(seq(1,27,3))
original_gee_power <- cbind(setkeep[,1:10], round(reskeep[,ipow],3))
original_gee_estimates <- cbind(setkeep[,1:10], round(reskeep[,iest],3))
original_gee_estimates
iest <- c(seq(1,27,3))
original_gee_power <- cbind(setkeep[,1:10], round(reskeep[,ipow],3))
original_gee_estimates <- cbind(setkeep[,1:10], round(reskeep[,iest],3))
original_gee_estimates %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = mzdzmfpgs_e, `SI (m2)` = mzdzmpgsm_e, `CT (m3)` = mzdzmfpgs_m_e, `SI (m3)` = mzdzmpgst_mf_e) %>%
filter(SI == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(title = NULL,
x = "CT",
y = "Value") +
theme_minimal()
library(tidyverse)
iest <- c(seq(1,27,3))
original_gee_power <- cbind(setkeep[,1:10], round(reskeep[,ipow],3))
original_gee_estimates <- cbind(setkeep[,1:10], round(reskeep[,iest],3))
original_gee_estimates %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = mzdzmfpgs_e, `SI (m2)` = mzdzmpgsm_e, `CT (m3)` = mzdzmfpgs_m_e, `SI (m3)` = mzdzmpgst_mf_e) %>%
filter(SI == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(title = NULL,
x = "CT",
y = "Value") +
theme_minimal()
as.data.frame(cbind(setkeep[,1:10], round(reskeep[,iest],3)))
iest <- c(seq(1,27,3))
original_gee_power <- as.data.frame(cbind(setkeep[,1:10], round(reskeep[,ipow],3)))
original_gee_estimates <- as.data.frame(cbind(setkeep[,1:10], round(reskeep[,iest],3)))
original_gee_estimates %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = mzdzmfpgs_e, `SI (m2)` = mzdzmpgsm_e, `CT (m3)` = mzdzmfpgs_m_e, `SI (m3)` = mzdzmpgst_mf_e) %>%
filter(SI == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(title = NULL,
x = "CT",
y = "Value") +
theme_minimal()
original_gee_estimates %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = mzdzmfpgs_e, `SI (m2)` = mzdzmpgsm_e, `CT (m3)` = mzdzmfpgs_m_e, `SI (m3)` = mzdzmpgst_mf_e) %>%
filter(SI == 0) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(title = NULL,
x = "CT",
y = "Value") +
theme_minimal()
# Debugged data
app_mx_estimates <- read.csv("debug_mx_estimates.csv")
app_mx_power <- read.csv("debug_mx_power.csv")
app_gee_estimates <- read.csv("debug_gee_estimates.csv")
app_gee_power <- read.csv("debug_gee_power.csv")
library(tidyverse)
# PLOTTING
# Start with some overview plots
# MZ DZ (Model 1 vs Model 3)
app_mx_power %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = p1, `SI (m2)` = p2, `CT (m3)` = p3, `SI (m3)` = p4) %>%
filter(CT == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = SI, y = value, color = variable)) +
geom_line() +
geom_point() +
facet_wrap(~PGS_percent) +
labs(title = NULL,
x = "SI",
y = "Value") +
theme_minimal()
app_mx_power %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = p1, `SI (m2)` = p2, `CT (m3)` = p3, `SI (m3)` = p4) %>%
filter(SI == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
facet_wrap(~PGS_percent) +
labs(title = NULL,
x = "CT",
y = "Value") +
theme_minimal()
# SOMETHING IS WRONG HERE... is it the /2? CT model 1 is too low
app_gee_power %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = p6, `SI (m2)` = p7, `CT (m3)` = p8, `SI (m3)` = p9) %>%
filter(CT == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = SI, y = value, color = variable)) +
geom_line() +
geom_point() +
facet_wrap(~PGS_percent) +
labs(title = NULL,
x = "SI",
y = "Value") +
theme_minimal()
app_gee_power %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = p6, `SI (m2)` = p7, `CT (m3)` = p8, `SI (m3)` = p9) %>%
filter(SI == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
facet_wrap(~PGS_percent) +
labs(title = NULL,
x = "CT",
y = "Value") +
theme_minimal()
# Same for estimates
app_mx_estimates %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = e1, `SI (m2)` = e2, `CT (m3)` = e3, `SI (m3)` = e4) %>%
filter(CT == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = SI, y = value, color = variable)) +
geom_line() +
geom_point() +
facet_wrap(~PGS_percent) +
labs(title = NULL,
x = "SI",
y = "Value") +
theme_minimal()
app_mx_estimates %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = e1, `SI (m2)` = e2, `CT (m3)` = e3, `SI (m3)` = e4) %>%
filter(SI == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
facet_wrap(~PGS_percent) +
labs(title = NULL,
x = "CT",
y = "Value") +
theme_minimal()
app_gee_estimates %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = e6, `SI (m2)` = e7, `CT (m3)` = e8, `SI (m3)` = e9) %>%
filter(CT == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = SI, y = value, color = variable)) +
geom_line() +
geom_point() +
facet_wrap(~PGS_percent) +
labs(title = NULL,
x = "SI",
y = "Value") +
theme_minimal()
app_gee_estimates %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = e6, `SI (m2)` = e7, `CT (m3)` = e8, `SI (m3)` = e9) %>%
filter(SI == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
facet_wrap(~PGS_percent) +
labs(title = NULL,
x = "CT",
y = "Value") +
theme_minimal()
# COMPARE THESE RESULTS TO THE RESULTS FROM CONOR's ORIGINAL SCRIPT
iest <- c(seq(1,27,3))
original_gee_power <- as.data.frame(cbind(setkeep[,1:10], round(reskeep[,ipow],3)))
original_gee_estimates <- as.data.frame(cbind(setkeep[,1:10], round(reskeep[,iest],3)))
original_gee_power %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = mzdzmfpgs_p, `SI (m2)` = mzdzmpgsm_p, `CT (m3)` = mzdzmfpgs_m_p, `SI (m3)` = mzdzmpgst_mf_p) %>%
filter(SI == 0) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(title = NULL,
x = "CT",
y = "Value") +
theme_minimal()
original_gee_estimates %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = mzdzmfpgs_e, `SI (m2)` = mzdzmpgsm_e, `CT (m3)` = mzdzmfpgs_m_e, `SI (m3)` = mzdzmpgst_mf_e) %>%
filter(SI == 0) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(title = NULL,
x = "CT",
y = "Value") +
theme_minimal()
# Debugged data
app_mx_estimates <- read.csv("debug_mx_estimates.csv")
app_mx_power <- read.csv("debug_mx_power.csv")
app_gee_estimates <- read.csv("debug_gee_estimates.csv")
app_gee_power <- read.csv("debug_gee_power.csv")
library(tidyverse)
# PLOTTING
# Start with some overview plots
# MZ DZ (Model 1 vs Model 3)
app_mx_power %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = p1, `SI (m2)` = p2, `CT (m3)` = p3, `SI (m3)` = p4) %>%
filter(CT == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = SI, y = value, color = variable)) +
geom_line() +
geom_point() +
facet_wrap(~PGS_percent) +
labs(title = NULL,
x = "SI",
y = "Value") +
theme_minimal()
app_mx_power %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = p1, `SI (m2)` = p2, `CT (m3)` = p3, `SI (m3)` = p4) %>%
filter(SI == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
facet_wrap(~PGS_percent) +
labs(title = NULL,
x = "CT",
y = "Value") +
theme_minimal()
# SOMETHING IS WRONG HERE... is it the /2? CT model 1 is too low
app_gee_power %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = p6, `SI (m2)` = p7, `CT (m3)` = p8, `SI (m3)` = p9) %>%
filter(CT == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = SI, y = value, color = variable)) +
geom_line() +
geom_point() +
facet_wrap(~PGS_percent) +
labs(title = NULL,
x = "SI",
y = "Value") +
theme_minimal()
app_gee_power %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = p6, `SI (m2)` = p7, `CT (m3)` = p8, `SI (m3)` = p9) %>%
filter(SI == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
facet_wrap(~PGS_percent) +
labs(title = NULL,
x = "CT",
y = "Value") +
theme_minimal()
# Same for estimates
app_mx_estimates %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = e1, `SI (m2)` = e2, `CT (m3)` = e3, `SI (m3)` = e4) %>%
filter(CT == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = SI, y = value, color = variable)) +
geom_line() +
geom_point() +
facet_wrap(~PGS_percent) +
labs(title = NULL,
x = "SI",
y = "Value") +
theme_minimal()
app_mx_estimates %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = e1, `SI (m2)` = e2, `CT (m3)` = e3, `SI (m3)` = e4) %>%
filter(SI == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
facet_wrap(~PGS_percent) +
labs(title = NULL,
x = "CT",
y = "Value") +
theme_minimal()
app_gee_estimates %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = e6, `SI (m2)` = e7, `CT (m3)` = e8, `SI (m3)` = e9) %>%
filter(CT == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = SI, y = value, color = variable)) +
geom_line() +
geom_point() +
facet_wrap(~PGS_percent) +
labs(title = NULL,
x = "SI",
y = "Value") +
theme_minimal()
app_gee_estimates %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = e6, `SI (m2)` = e7, `CT (m3)` = e8, `SI (m3)` = e9) %>%
filter(SI == 0) %>%
mutate(PGS_percent = factor(scales::percent(PGS), levels = c("2%", "5%", "10%", "15%"))) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
facet_wrap(~PGS_percent) +
labs(title = NULL,
x = "CT",
y = "Value") +
theme_minimal()
# COMPARE THESE RESULTS TO THE RESULTS FROM CONOR's ORIGINAL SCRIPT
iest <- c(seq(1,27,3))
original_gee_power <- as.data.frame(cbind(setkeep[,1:10], round(reskeep[,ipow],3)))
original_gee_estimates <- as.data.frame(cbind(setkeep[,1:10], round(reskeep[,iest],3)))
original_gee_power %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = mzdzmfpgs_p, `SI (m2)` = mzdzmpgsm_p, `CT (m3)` = mzdzmfpgs_m_p, `SI (m3)` = mzdzmpgst_mf_p) %>%
filter(CT == 0) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = SI, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(title = NULL,
x = "SI",
y = "Value") +
theme_minimal()
original_gee_power %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = mzdzmfpgs_p, `SI (m2)` = mzdzmpgsm_p, `CT (m3)` = mzdzmfpgs_m_p, `SI (m3)` = mzdzmpgst_mf_p) %>%
filter(SI == 0) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(title = NULL,
x = "CT",
y = "Value") +
theme_minimal()
original_gee_estimates %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = mzdzmfpgs_e, `SI (m2)` = mzdzmpgsm_e, `CT (m3)` = mzdzmfpgs_m_e, `SI (m3)` = mzdzmpgst_mf_e) %>%
filter(CT == 0) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = SI, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(title = NULL,
x = "SI",
y = "Value") +
theme_minimal()
original_gee_estimates %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = mzdzmfpgs_e, `SI (m2)` = mzdzmpgsm_e, `CT (m3)` = mzdzmfpgs_m_e, `SI (m3)` = mzdzmpgst_mf_e) %>%
filter(SI == 0) %>%
gather(key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`) %>%
ggplot(aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(title = NULL,
x = "CT",
y = "Value") +
theme_minimal()
ext_estimates <- read.csv("2024-06-04_mx_estimates_ext.csv")
ext_power <- read.csv("2024-06-04_mx_power_ext.csv")
ext_power <- ext_power %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = p1,
`SI (m2)` = p2, `CT (m3)` = p3, `SI (m3)` = p4)
data_noCT <- ext_power[ext_power$CT == 0, ]
# Gather the data for plotting
data_noCT_long <- gather(data_noCT, key = "variable", value = "value",`CT (m1)`, `SI (m2)`, `CT (m3)`, `SI (m3)`)
# Create the plot
ggplot(data_noCT_long, aes(x = SI, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(title = NULL,
x = "SI",
y = "Value") +
theme_minimal()
# Filter the data for b = 0
data_b0 <- ext_power[ext_power$SI== 0, ]
# Gather the data for plotting
data_b0_long <- gather(data_b0, key = "variable", value = "value", 'CT (m1)',
'SI (m2)', 'CT (m3)', 'SI (m3)')
# Create the plot
ggplot(data_b0_long, aes(x = CT, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(title = NULL,
x = "g",
y = "Value") +
theme_minimal()
# Filter the data for g = 0
data_g0 <- ext_power[ext_power$g == 0, ]
data_g0_long <- gather(data_g0, key = "variable", value = "value", p1, p2, p3, p4)
