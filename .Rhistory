#               mxFitFunctionAlgebra("minus2loglikelihood")
)
# fit the model
Model_2out <- mxRun(Model_2)
summary(Model_2out)
#
sat_2out = mxRefModels(Model_2out, run=T)
mxCompare(sat_2out, Model_2out)
#
#
Model_2g=omxSetParameters(Model_2out, labels='bpgsg', value=0, free=F)
Model_2g_out = mxRun(Model_2g)
#
Model_2b=omxSetParameters(Model_2out, labels='bpgsb', value=0, free=F)
Model_2b_out = mxRun(Model_2b)
# "bpgsb","bpgsg"
Model_2bg = omxSetParameters(Model_2out, labels=c('bpgsb','bpgsg'), free=F, values=c(0))
Model_2bg_out <- mxRun(Model_2bg)
#
#
# sat
#
# -----------------------------------------------   vars
varnames=c('pht1','pht2')#
#
# the model to calculate expected summary statistics
# this is the twin model phenotypic
# [1] "pht1"   "pht2"   "pgsm"   "pgsf"   "pgst1"  "pgsnt1" "pgst2"  "pgsnt2" "pgsmf"  "mpgst"
# [1] "pgsm"  "pgsf"  "pgst1" "pgst2" "pht1"  "pht2"  "pgsmf" "mpgst"
nphen1=1
nphen2=2
SAT1  = mxModel("SAT",
#
# Matrices a, c, and e to store the a, c, and e path coefficients
mxMatrix(type="Stand", nrow=nphen2, ncol=nphen2,
free=c(T), values=c(.5),
label=c("rmz"),name="Rmz"),
mxMatrix(type="Stand", nrow=nphen2, ncol=nphen2,
free=c(T), values=c(.25),
label=c("rdz"),name="Rdz"),
mxMatrix(type="Diag", nrow=nphen2, ncol=nphen2,
free=c(T), values=c(.7),
label=c("sd","sd"),name="SD"),
#
#
# Matrix expCovMZ for expected covariance matrix for MZ twins
mxAlgebra( expression=
SD%*%Rmz%*%SD,name="expCovMZ"),
# Matrix expCovMZ for expected covariance matrix for DZ twins
mxAlgebra( expression=
SD%*%Rdz%*%SD,,name="expCovDZ")
)
# a model the data, the fit function (MZ)
MZmodel=mxModel("MZ",
#
# Matrix expMean for expected mean vector for MZ and DZ twins
mxMatrix(type="Full", nrow=1, ncol=4, free=F, labels=c("data.pgst1","data.pgst2","data.pgsm","data.pgsf"), name="pred"),
mxMatrix(type="Full", nrow=1, ncol=4, free=c(T,T,T,T), values=c(0,0,0,0),
labels=c("bpgst","bpgsb","bpgsg","bpgsg"), name="bs1"),
mxMatrix(type="Full", nrow=1, ncol=4, free=T, values=c(0,0,0,0),
labels=c("bpgsb","bpgst","bpgsg","bpgsg"), name="bs2"),
mxMatrix(type="Full", nrow=1, ncol=1,
free=c(T),values=c(0),label=c("b0"),
name="Int"),
mxAlgebra(expression=cbind(b0+pred%*%t(bs1), b0+pred%*%t(bs2)), name='expMean'),
mxData(observed=phdatmz_e, type="raw"),
mxExpectationNormal(covariance="SAT.expCovMZ",
means = "expMean", varnames),
mxFitFunctionML()
)
# a model the data, the fit function (DZ)
DZmodel=mxModel("DZ",
#
# Matrix expMean for expected mean vector for MZ and DZ twins
mxMatrix(type="Full", nrow=1, ncol=4, free=F, labels=c("data.pgst1","data.pgst2","data.pgsm","data.pgsf"), name="pred"),
mxMatrix(type="Full", nrow=1, ncol=4, free=c(T,T,T,T), values=c(0,0,0,0),
labels=c("bpgst","bpgsb","bpgsg","bpgsg"), name="bs1"),
mxMatrix(type="Full", nrow=1, ncol=4, free=T, values=c(0,0,0,0),
labels=c("bpgsb","bpgst","bpgsg","bpgsg"), name="bs2"),
mxMatrix(type="Full", nrow=1, ncol=1,
free=c(T),values=c(0),label=c("b0"),
name="Int"),
mxAlgebra(expression=cbind(b0+pred%*%t(bs1), b0+pred%*%t(bs2)), name='expMean'),
mxData(observed=phdatdz_e, type="raw"),
mxExpectationNormal(covariance="SAT.expCovDZ",
means = "expMean", varnames),
mxFitFunctionML()
)
Model_3 <-  mxModel("twinSAT", SAT1, MZmodel, DZmodel, mxFitFunctionMultigroup( c("MZ","DZ") )
#               mxAlgebra(MZ.objective + DZ.objective, name="minus2loglikelihood"),
#               mxFitFunctionAlgebra("minus2loglikelihood")
)
# fit the model
Model_3out <- mxRun(Model_3)
#summary(Model_3out)
Model_3g=omxSetParameters(Model_3out, labels='bpgsg', value=0, free=F)
Model_3g_out = mxRun(Model_3g)
#
Model_3b=omxSetParameters(Model_3out, labels='bpgsb', value=0, free=F)
Model_3b_out = mxRun(Model_3b)
# "bpgsb","bpgsg"
Model_3bg = omxSetParameters(Model_3out, labels=c('bpgsb','bpgsg'), free=F, values=c(0))
Model_3bg_out <- mxRun(Model_3bg)
#
#
#
#
# ---------------------------------------------------------- def vars DZ only
# sat
#
# -----------------------------------------------   defvars . no backgroud ACE dz only
varnames=c('pht1','pht2')#
#
# the model to calculate expected summary statistics
# this is the twin model phenotypic
# [1] "pht1"   "pht2"   "pgsm"   "pgsf"   "pgst1"  "pgsnt1" "pgst2"  "pgsnt2" "pgsmf"  "mpgst"
# [1] "pgsm"  "pgsf"  "pgst1" "pgst2" "pht1"  "pht2"  "pgsmf" "mpgst"
nphen1=1
nphen2=2
DZModel  = mxModel("DZonly",
#
# Matrices a, c, and e to store the a, c, and e path coefficients
mxMatrix(type="Stand", nrow=nphen2, ncol=nphen2,
free=c(T), values=c(.25),
label=c("rdz"),name="Rdz"),
mxMatrix(type="Diag", nrow=nphen2, ncol=nphen2,
free=c(T), values=c(.7),
label=c("sd","sd"),name="SD"),
#
#
# Matrix expCovMZ for expected covariance matrix for DZ twins
#
mxAlgebra( expression=
SD%*%Rdz%*%SD,,name="expCovDZ"),
#
# Matrix expMean for expected mean vector for DZ twins
#
mxMatrix(type="Full", nrow=1, ncol=4, free=F, labels=c("data.pgst1","data.pgst2","data.pgsm","data.pgsf"), name="pred"),
mxMatrix(type="Full", nrow=1, ncol=4, free=c(T,T,T,T), values=c(0,0,0,0),
labels=c("bpgst","bpgsb","bpgsg","bpgsg"), name="bs1"),
mxMatrix(type="Full", nrow=1, ncol=4, free=T, values=c(0,0,0,0),
labels=c("bpgsb","bpgst","bpgsg","bpgsg"), name="bs2"),
mxMatrix(type="Full", nrow=1, ncol=1,
free=c(T),values=c(0),label=c("b0"),
name="B0"),
mxAlgebra(expression=cbind(B0+pred%*%t(bs1), B0+pred%*%t(bs2)), name='expMean'),
mxData(observed=phdatdz_e, type="raw"),
mxExpectationNormal(covariance="expCovDZ",
means ="expMean", varnames),
mxFitFunctionML()
)
# Model_4 <-  mxModel(name="DZ1SAT", DZModel)
Model_4 <-  mxModel(DZModel)
# fit the model
Model_4out <- mxRun(Model_4)
Model_4g=omxSetParameters(Model_4out, labels='bpgsg', value=0, free=F)
Model_4g_out = mxRun(Model_4g)
#
Model_4b=omxSetParameters(Model_4out, labels='bpgsb', value=0, free=F)
Model_4b_out = mxRun(Model_4b)
# "bpgsb","bpgsg"
Model_4bg = omxSetParameters(Model_4out, labels=c('bpgsb','bpgsg'), free=F, values=c(0))
Model_4bg_out <- mxRun(Model_4bg)
# Power
ncp_tmp <- c(
mxCompare(Model_1out, Model_1b_out)[2,7], # g for g only
mxCompare(Model_1out, Model_1g_out)[2,7], # b for b only
mxCompare(Model_1b_out, Model_1bg_out)[2,7],
mxCompare(Model_1g_out, Model_1bg_out)[2,7],
mxCompare(Model_2out, Model_2b_out)[2,7], # g for g only
mxCompare(Model_2out, Model_2g_out)[2,7], # b for b only
mxCompare(Model_2b_out, Model_2bg_out)[2,7], # g both
mxCompare(Model_2g_out, Model_2bg_out)[2,7], # b both
mxCompare(Model_3out, Model_3b_out)[2,7], # g for g only
mxCompare(Model_3out, Model_3g_out)[2,7], # b for b only
mxCompare(Model_3b_out, Model_3bg_out)[2,7], # g both
mxCompare(Model_3g_out, Model_3bg_out)[2,7], # b both
mxCompare(Model_4out, Model_4b_out)[2,7], # g for g only
mxCompare(Model_4out, Model_4g_out)[2,7], # b for b only
mxCompare(Model_4b_out, Model_4bg_out)[2,7], # g both
mxCompare(Model_4g_out, Model_4bg_out)[2,7] # b both
)
ncp_power_tmp <- sapply(ncp_tmp, function(ncp) {
gnome_power(alpha, 1, ncp)
})
# Estimates
estimates_tmp <- c(
summary(Model_1b_out)$parameters[8, "Estimate"], # g1 - CT Model 1 CT only
summary(Model_1g_out)$parameters[8,'Estimate'], # b1 - SI Model 1 SI only
summary(Model_1out)$parameters[9,'Estimate'], # g1 - CT Model 1 both
summary(Model_1out)$parameters[8,'Estimate'], # b1 - SI Model 1 both
summary(Model_2b_out)$parameters[5, 'Estimate'], # bpgsg - CT Model 2 CT only
summary(Model_2g_out)$parameters[5, 'Estimate'], # bpgsb - SI Model 2 SI only
summary(Model_2out)$parameters[6, 'Estimate'], # bpgsg - CT Model 2 both
summary(Model_2out)$parameters[5, 'Estimate'], # bpgsb - SI Model 2 both
summary(Model_3b_out)$parameters[5, 'Estimate'], # bpgsg - CT Model 3 CT only
summary(Model_3g_out)$parameters[5, 'Estimate'], # bpgsb - SI Model 3 SI only
summary(Model_3out)$parameters[6, 'Estimate'], # bpgsg - CT Model 3
summary(Model_3out)$parameters[5, 'Estimate'], # bpgsb - SI Model 3
summary(Model_4b_out)$parameters[4, 'Estimate'], # bpgsg - CT Model 4 CT only
summary(Model_4g_out)$parameters[4, 'Estimate'], # bpgsb - SI Model 4 SI only
summary(Model_4out)$parameters[5, 'Estimate'], # bpgsg - CT Model 4
summary(Model_4out)$parameters[4, 'Estimate'] # bpgsb - SI Model 4
)
mxkeep[counter_within, ] <- c(ncp_power_tmp, estimates_tmp)
}
# For reskeep
ipow = c(seq(3,27,3))
iest = c(seq(1,25,3))
# For mxkeep
jpow = 1:16
jest = 17:32
gee_estimates <- cbind(setkeep[,1:10], round(reskeep[,iest],3)) %>%
as.data.frame()
gee_power <- cbind(setkeep[,1:10], round(reskeep[,ipow],3)) %>%
as.data.frame()
mx_estimates <- cbind(setkeep[,1:10], round(mxkeep[,jest],3)) %>%
as.data.frame()
mx_power <- cbind(setkeep[,1:10], round(mxkeep[,jpow],3)) %>%
as.data.frame()
final_gee_estimates[counter_overall-n_set+1:counter_overall,] <- gee_estimates
final_gee_power[counter_overall-n_set+1:counter_overall,] <- gee_power
final_mx_estimates[counter_overall-n_set+1:counter_overall,] <- mx_estimates
final_mx_power[counter_overall-n_set+1:counter_overall,] <- mx_power
counter_within = 0 # reset set counter for each PGS setting
}
return(list(final_mx_estimates, final_mx_power, final_gee_estimates, final_gee_power))
}
# Run simulation for paper
# data_list <- dolan_simulation_function()
#Run simulation for appendix
data_list <- dolan_simulation_function(a = sqrt(c(.4, .5)), c = sqrt(c(.3, .2)),
e = sqrt(.3), nloci = 100, npgsloci = c(2, 5, 10, 15))
# data_list <- dolan_simulation_function(a = sqrt(c(.4, .5)), c = sqrt(c(.3, .2)),
#                          e = sqrt(.3), nloci = 100, npgsloci = c(2, 5, 10, 15))
# check_list <- dolan_simulation_function(a = sqrt(.4), c = sqrt(.3),
#                           e = sqrt(.3), nloci = 100, npgsloci = c(2, 5, 10),
#                           ct = sqrt(c(0, .0025)), si = sqrt(c(0, .0025)), x = 0)
# Extract data sets
mx_estimates <- drop_na(data_list[[1]])
mx_power <- drop_na(data_list[[2]])
gee_estimates <- drop_na(data_list[[3]])
gee_power <- drop_na(data_list[[4]])
# Re-name columns
setnames = c('nmz','ndz','a','c','e','g','b','x','PGS','A')
colnames(mx_estimates) <- c(setnames, paste0("e", 1:16))
colnames(mx_power) <- c(setnames, paste0("p", 1:16))
colnames(gee_estimates) <- c(setnames, paste0("e", 1:9))
colnames(gee_power) <- c(setnames, paste0("p", 1:9))
mxestimates <- mx_estimates %>%
mutate(Smz = gnome_effect(a = a, c = c, e = e, g = g, b = b)$mz,
Sdz = gnome_effect(a = a, c = c, e = e, g = g, b = b)$dz)
mxpower <- mx_power %>%
mutate(Smz = gnome_effect(a = a, c = c, e = e, g = g, b = b)$mz,
Sdz = gnome_effect(a = a, c = c, e = e, g = g, b = b)$dz)
geeestimates <- gee_estimates %>%
mutate(Smz = gnome_effect(a = a, c = c, e = e, g = g, b = b)$mz,
Sdz = gnome_effect(a = a, c = c, e = e, g = g, b = b)$dz)
geepower <- gee_power %>%
mutate(Smz = gnome_effect(a = a, c = c, e = e, g = g, b = b)$mz,
Sdz = gnome_effect(a = a, c = c, e = e, g = g, b = b)$dz)
# Write data frames to CSV files
write.csv(mxestimates, file = "2024-05-28_mx_estimates_appendix.csv", row.names = TRUE)
write.csv(mxpower, file = "2024-05-28_mx_power_appendix.csv", row.names = TRUE)
write.csv(geeestimates, file = "2024-05-28_gee_estimates_appendix.csv", row.names = TRUE)
write.csv(geepower, file = "2024-05-28_gee_power_appendix.csv", row.names = TRUE)
library(tidyverse)
# Appendix data
app_mx_estimates <- read.csv("2024-05-24_mx_estimates_appendix.csv")
library(tidyverse)
# Appendix data
app_mx_estimates <- read.csv("2024-05-28_mx_estimates_appendix.csv")
app_mx_power <- read.csv("2024-05-28_mx_power_appendix.csv")
app_gee_estimates <- read.csv("2024-05-28_gee_estimates_appendix.csv")
app_gee_power <- read.csv("2024-05-28_gee_power_appendix.csv")
# DZ-only data
p13_mx_data <- app_mx_power %>%
filter(g == 0, round(a^2, 3) == .4) %>%
select("b", "p13", 'PGS') %>%
mutate(Variable = "CT")
p14_mx_data <- app_mx_power %>%
filter(b == 0, round(a^2, 3) == .4) %>%
select("g", "p14", 'PGS') %>%
mutate(Variable = "SI")
colnames(p13_mx_data)[1:2] <- c("Confounder", "Power")
colnames(p14_mx_data)[1:2] <- c("Confounder", "Power")
mx_dz_data <- rbind(p13_mx_data, p14_mx_data) %>%
mutate(Model = "OpenMx", PGS_percent = scales::percent(PGS))
# Create same dataset for MX
p2_gee_data <- app_gee_power %>%
filter(g == 0, round(a^2, 3) == .4) %>%
select("b", "p2", 'PGS') %>%
mutate(Variable = "CT")
p3_gee_data <- app_gee_power %>%
filter(b == 0, round(a^2, 3) == .4) %>%
select("g", "p3", 'PGS') %>%
mutate(Variable = "SI")
colnames(p2_gee_data)[1:2] <- c("Confounder", "Power")
colnames(p3_gee_data)[1:2] <- c("Confounder", "Power")
gee_dz_data <- rbind(p2_gee_data, p3_gee_data) %>%
mutate(Model = "Gee", PGS_percent = scales::percent(PGS))
# Combine the two
# Merge the data frames based on Confounder, PGS, and Variable
full_dz_data <- rbind(mx_dz_data, gee_dz_data)
full_dz_data$PGS_percent <- scales::percent(full_dz_data$PGS)
full_dz_data$PGS_percent <- factor(full_dz_data$PGS_percent, levels = c("2%", "5%", "10%", "15%"))
full_dz_data %>%
filter(Model == "OpenMx") %>%
ggplot(data = ., mapping = aes(x = Confounder, y = Power, colour = Variable)) +
geom_line(linewidth = 0.8) +
geom_point(aes(shape = Variable)) +
facet_wrap(~PGS_percent) +
theme_light()
ggplot(data = full_dz_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Model)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("Gee" = "dotted", "OpenMx" = "solid")) +
theme_light()
# Plot of OpenMx MZ&DZ vs. DZ-only
p1_mx_data <- app_mx_power %>%
filter(g == 0, round(a^2, 3) == .4) %>%
select("b", "p1", 'PGS') %>%
mutate(Variable = "CT")
p2_mx_data <- app_mx_power %>%
filter(b == 0, round(a^2, 3) == .4) %>%
select("g", "p2", 'PGS') %>%
mutate(Variable = "SI")
colnames(p1_mx_data)[1:2] <- c("Confounder", "Power")
colnames(p2_mx_data)[1:2] <- c("Confounder", "Power")
mx_mzdz_data <- rbind(p1_mx_data, p2_mx_data) %>%
mutate(Model = "OpenMx", Sample = "MZ & DZ", PGS_percent = scales::percent(PGS))
mx_dz_data <- mx_dz_data %>%
mutate(Sample = "DZ")
# Plot OpenMx DZ vs. MZ & DZ
full_mx_data <- rbind(mx_dz_data, mx_mzdz_data)
full_mx_data$PGS_percent <- scales::percent(full_mx_data$PGS)
full_mx_data$PGS_percent <- factor(full_mx_data$PGS_percent, levels = c("2%", "5%", "10%", "15%"))
ggplot(data = full_mx_data, mapping = aes(x = Confounder, y = Power, color = Variable, linetype = Sample)) +
geom_line(linewidth = 0.8) +
geom_point() +
facet_wrap(~PGS_percent) +
scale_linetype_manual(values = c("DZ" = "dotted", "MZ & DZ" = "solid")) +
theme_light()
View(app_mx_estimates)
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1)
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz)
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
sort(b, g)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(b, g)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(b) %>%
arrange(g)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(b + g) %>%
# DZ only
# DZ-only data
p13_mx_data <- app_mx_power %>%
filter(g == 0, round(a^2, 3) == .4) %>%
select("b", "p13", 'PGS') %>%
mutate(Variable = "CT")
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(b + g)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(b < g, b + g)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(b > g, b + g)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(b + g, b > g)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(b, b + g, b > g)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(b + g, b, b > g)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(b, b + g, b > g)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(b, b > g, b + g)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(b)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(c(b,g) == 0)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(sum(as.logical(b,g)))
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(sum(as.logical(g, b)))
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(sum(as.logical(g, b)), b)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(sum(b == 0, g == 0), b)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(b == 0 + g == 0, b)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange((b == 0 + g == 0), b)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(sum(b == 0, g == 0), b)
# MZ and DZ
df <- app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz)
as.logical(df$b)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(as.logical(b) + as.logical(g))
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(as.logical(b) + as.logical(g), b)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(as.logical(b) + as.logical(g), b) %>%
mutate(Smz = scales::percent(Smz), Sdz = scales::percent(Sdz))
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(as.logical(b) + as.logical(g), b) %>%
mutate(Smz = scales::percent(Smz), Sdz = scales::percent(Sdz)) %>%
write.table(file = "clipboard", row.names = FALSE)
?write.table
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(as.logical(b) + as.logical(g), b) %>%
mutate(Smz = scales::percent(Smz), Sdz = scales::percent(Sdz)) %>%
write.table(file = "clipboard", row.names = FALSE, quote = FALSE)
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(as.logical(b) + as.logical(g), b) %>%
mutate(Smz = scales::percent(Smz), Sdz = scales::percent(Sdz)) %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = e1,
`SI (m2)` = e2, `CT (m3)` = e3, `SI (m3)` = e4) %>%
write.table(file = "clipboard", row.names = FALSE, quote = FALSE)
# MZ and DZ
app_mx_estimates %>%
filter(round(a^2, 3) == .4, PGS == 0.1) %>%
select(g, b, e1, e2, e3, e4, Smz, Sdz) %>%
arrange(as.logical(b) + as.logical(g), b) %>%
mutate(Smz = scales::percent(Smz), Sdz = scales::percent(Sdz)) %>%
rename(`CT` = g, `SI` = b, `CT (m1)` = e1,
`SI (m2)` = e2, `CT (m3)` = e3, `SI (m3)` = e4) %>%
write.table(file = "clipboard", row.names = FALSE, quote = FALSE, sep = ",")
