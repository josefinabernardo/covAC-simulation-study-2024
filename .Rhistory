egeeM3mzdzL=geeglm(ph~pgsmf+mpgst+pgst, id=famnr, corstr=cmethod,data=phdatL_e)#)$coefficients  #
#
# using exact data analyses
# get power exact power pgsmf, mpgst, pgsmf+mpgst: 3 tests ...  dz pairs,   dz + mz pairs
# get power exact power pgsmf: 1 tests ...  dz singles
#
# dz 1 pgsmf test ... test of mpgst does not apply given 1 dz
# model M1dz=lm(pht1~pgsmf+pgst1, data=phdatdz) ... 1dz test of pgsmf
tmp=summary(eM1dz)$coefficients
eM1dzest=tmp[2,1]; eM1dzse=tmp[2,2]; eM1dztest=tmp[2,3]**2; eM1dzpw=powchi(alpha,1,eM1dztest)  # ....**2 t to chi2
reskeep[ii,1:3]=c(eM1dzest,eM1dzse,eM1dzpw) # est st and power
#
# dz 1+2 test power
# model geeM1dzL=geeglm(ph~pgsmf+pgst, id=famnr, corstr=cmethod, data=phdatdzL) #  wald test is t^2 already
# pgsmf
tmp=summary(egeeM1dzL)$coefficients
egeeM1dzest=tmp[2,1]; egeeM1dzse=tmp[2,2]; egeeM1dztest=tmp[2,3]**1; egeeM1dzp=tmp[2,4]; egeeM1dzpw=powchi(alpha,1,egeeM1dztest)
reskeep[ii,4:6]=c(egeeM1dzest,egeeM1dzse,egeeM1dzpw) # est st and power
# dz 1+2 test power
#geeM2dzL=geeglm(ph~mpgst+pgst, id=famnr, corstr=cmethod,data=phdatdzL)#)$coefficients  #
# mpgst
tmp=summary(egeeM2dzL)$coefficients
egeeM2dzest=tmp[2,1]; egeeM2dzse=tmp[2,2]; egeeM2dztest=tmp[2,3]**1; egeeM2dzp=tmp[2,4]; egeeM2dzpw=powchi(alpha,1,egeeM2dztest)
reskeep[ii,7:9]=c(egeeM2dzest,egeeM2dzse,egeeM2dzpw) # est st and power
#
# geeM3dzL=geeglm(ph~pgsmf+mpgst+pgst, id=famnr, corstr=cmethod,data=phdatdzL)#)$coefficients  #
# pgsmf in presence of mfpgs
tmp=summary(egeeM3dzL)$coefficients
egeeM3dzest1=tmp[2,1]; egeeM3dzse1=tmp[2,2]; egeeM3dztest1=tmp[2,3]**1; egeeM3dzp1=tmp[2,4]; egeeM3dzpw1=powchi(alpha,1,egeeM3dztest1)
reskeep[ii,10:12]=c(egeeM3dzest1,egeeM3dzse1,egeeM3dzpw1) # est st and power
# mpgst
egeeM3dzest2=tmp[3,1]; egeeM3dzse2=tmp[3,2]; egeeM3dztest2=tmp[3,3]**1; egeeM3dzp2=tmp[3,4]; egeeM3dzpw2=powchi(alpha,1,egeeM3dztest2)
reskeep[ii,13:15]=c(egeeM3dzest2,egeeM3dzse2,egeeM3dzpw2) # est st and power
#
# mz dz 1+2 test power
#egeeM1mzdzL=geeglm(ph~pgsmf+pgst, id=famnr, corstr=cmethod,data=phdatL_e)#)$coefficients #
# pgsmf
tmp=summary(egeeM1mzdzL)$coefficients
egeeM1mzdzest=tmp[2,1]; egeeM1mzdzse=tmp[2,2]; egeeM1mzdztest=tmp[2,3]**1; egeeM1mzdzp=tmp[2,4]; egeeM1mzdzpw=powchi(alpha,1,egeeM1mzdztest)
reskeep[ii,16:18]=c(egeeM1mzdzest,egeeM1mzdzse,egeeM1mzdzpw) # est st and power
# dz 1+2 test power
# egeeM2mzdzL=geeglm(ph~mpgst+pgst, id=famnr, corstr=cmethod,data=phdatL_e)#)$coefficients  #
# mpgst
tmp=summary(egeeM2mzdzL)$coefficients
egeeM2mzdzest=tmp[2,1]; egeeM2mzdzse=tmp[2,2]; egeeM2mzdztest=tmp[2,3]**1; egeeM2mzdzp=tmp[2,4]; egeeM2mzdzpw=powchi(alpha,1,egeeM2mzdztest)
reskeep[ii,19:21]=c(egeeM2mzdzest,egeeM2mzdzse,egeeM2mzdzpw) # est st and power
#
# egeeM3mzdzL=geeglm(ph~pgsmf+mpgst+pgst, id=famnr, corstr=cmethod,data=phdatL_e)#)$coefficients  # #
# pgsmf in presence of mfpgs
tmp=summary(egeeM3mzdzL)$coefficients
egeeM3mzdzest1=tmp[2,1]; egeeM3mzdzse1=tmp[2,2]; egeeM3mzdztest1=tmp[2,3]**1; egeeM3mzdzp1=tmp[2,4]; egeeM3mzdzpw1=powchi(alpha,1,egeeM3mzdztest1)
reskeep[ii,22:24]=c(egeeM3mzdzest1,egeeM3mzdzse1,egeeM3mzdzpw1) # est st and power
# mpgst
egeeM3mzdzest2=tmp[3,1]; egeeM3mzdzse2=tmp[3,2]; egeeM3mzdztest2=tmp[3,3]**1; egeeM3mzdzp2=tmp[3,4]; egeeM3mzdzpw2=powchi(alpha,1,egeeM3mzdztest2)
reskeep[ii,25:27]=c(egeeM3mzdzest2,egeeM3mzdzse2,egeeM3mzdzpw2) # est st and power
#
#}} }} }}
#
reskeep[ii,28:31]=R2s[1:4]
ipow=c(seq(3,27,3))
colnames(reskeep) = c('dz1mfpgs_e','dz1mfpgs_s','dz1mfpgs1_p',
'dz2mfpgs_e','dz2mfpgs_s','dz2mfpgs_p',
'dz2mpgsm_e','dz2mpgsm_s','dz2mpgsm_p',
'dz2mfpgs_m_e','dz2mfpgs_m_s','dz2mfpgs_m_p',
'dz2mpgst_mf_e','dz2mpgst_mf_s','dz2mpgst_mf_p',
'mzdzmfpgs_e','mzdzmfpgs_s','mzdzmfpgs_p',
'mzdzmpgsm_e','mzdzmpgsm_s','mzdzmpgsm_p',
'mzdzmfpgs_m_e','mzdzmfpgs_m_s','mzdzmfpgs_m_p',
'mzdzmpgst_mf_e','mzdzmpgst_mf_s','mzdzmpgst_mf_p','R2prs','R2_mf','R2_tw','R2_mf_tw')
#reskeep[,ipow]
#
# switch to OpenMx covariance structure modeling ------------------------------ MZ and DZ
#
#             1      2      3 1    4 2      5 3      6 4
vnamesdz=c('pht1','pht2','pgst1','pgst2','pgsm','pgsf')
vnamesmz=c('pht1','pht2','pgst1','pgsm','pgsf')
#
##         1       2    3       4      5      6      7       8  .... 7 and 8 are correlated 1 in MZs
w_mzdat=phdatmz_e[,vnamesmz]
w_dzdat=phdatdz_e[,vnamesdz]
# ==============================================================================================
#
# model covariance matrix:
#  GDFD'G' + Y |  GDFD'
#  FD'G'D      |  DFD'
#
# G contains the regressions of offspring phenotype on parental and offspring prs
# Y is the residual phenotypic covariance matrix modeled using ACE model
#
mz1out=4 # remove 8th variable prs of mz twin 2.
Filter=diag(6)[-mz1out,]
#
RAdz=matrix(c(.5),4,4)
diag(RAdz)=1
RAdz[3,4]=RAdz[4,3]=0  # m f assortative mating
RAmz=RAdz
RAmz[1,2]=RAmz[2,1]=1 # MZ twins
RAfree=matrix(F,4,4)
RAlabels=matrix(NA,4,4)
#
M1 = mxModel("M1",
mxMatrix(type='Full', nrow=5, ncol=6, free=F, values=Filter, labels=c(NA), name='Filter'),
# mean
mxMatrix(type="Full", nrow=1, ncol=6,
#
free=c(T,T,T,T,T,T),
values=c(0,0,0,0,0,0),
label=c("mph","mph","mprs","mprs","mprs","mprs"),
name="expMeandz"),
mxAlgebra(expression=(expMeandz%*%t(Filter)), name="expMeanmz"),
# prs stdevs matrix D
mxMatrix(type="Diag", nrow=4, ncol=4,
free=c(T,T,T,T),
values=c(.7,.7,.7,.7),
labels=c("sdp","sdp","sdp","sdp"), lbound=.01,
name="D"),
# prs correlation matris F
mxMatrix(type="Symm", nrow=4, ncol=4,
free=RAfree, values=RAdz, labels=RAlabels, name="Fdz"),
mxMatrix(type="Symm", nrow=4, ncol=4,
free=RAfree, values=RAmz, labels=RAlabels, name="Fmz"),
# A matrix for P = A + C + E
mxMatrix(type="Symm", nrow=2, ncol=2,
free=c(F), values=RAdz[1:2,1:2], labels=c(NA), name="Adz"),
mxMatrix(type="Symm", nrow=2, ncol=2,
free=c(F), values=RAmz[1:2,1:2], labels=c(NA), name="Amz"),
# C matrix for P = A + C + E
mxMatrix(type="Symm", nrow=2, ncol=2,
free=c(F), values=c(1), labels=c(NA), name="C"),
# E
mxMatrix(type="Iden", nrow=2, ncol=2, name="E"),
#
# A matrix for P = A + C + E
mxMatrix(type="Symm", nrow=1, ncol=1,
free=c(T), values=c(.33), labels=c("sa2"), name="Av"),
# C matrix for P = A + C + E
mxMatrix(type="Symm", nrow=1, ncol=1,
free=c(T), values=c(.33), labels=c("sc2"), name="Cv"),
# E matrix for P = A + C + E
mxMatrix(type="Symm", nrow=1, ncol=1,
free=c(T), values=c(.33), labels=c("se2"), name="Ev"),
#
mxMatrix(type="Full", nrow=2, ncol=4,
free=matrix(c(
T,T,T,T,
T,T,T,T),2,4,byrow=T),
label=matrix(c(
'a1','b1','g1','g1',
'b1','a1','g1','g1'),2,4,byrow=T),
values=matrix(c(
.1, 0, .01,.01,
0,.1, .01,.01),2,4,byrow=T), name='G'),
#
mxAlgebra(expression=Av%x%Amz + Cv%x%C + Ev%x%E, name="Ymz"),
mxAlgebra(expression=Av%x%Adz + Cv%x%C + Ev%x%E, name="Ydz"),
mxAlgebra(expression=D%*%Fdz%*%t(D), name="Pdz"),
mxAlgebra(expression=D%*%Fmz%*%t(D), name="Pmz"),
mxAlgebra(expression=G%*%Pdz%*%t(G)+Ydz, name="Sdz1"),
mxAlgebra(expression=G%*%Pmz%*%t(G)+Ymz, name="Smz1"),
#
#   mxAlgebra(expression=G%*%D%*%Pmz, name="GDPmz"),
#   mxAlgebra(expression=G%*%D%*%Pdz, name="GDPdz"),
mxAlgebra(expression=G%*%Pmz, name="GDPmz"),
mxAlgebra(expression=G%*%Pdz, name="GDPdz"),
mxAlgebra(expression=Filter%*%rbind(cbind(Smz1,GDPmz),cbind(t(GDPmz),Pmz))%*%t(Filter), name="Smz"),
mxAlgebra(expression=rbind(cbind(Sdz1,GDPdz),cbind(t(GDPdz),Pdz)), name="Sdz"),
#
mxCI(c('b1','a1','g1'))
#
)
DZ =  mxModel('DZ',
mxData( observed=w_dzdat, type="raw"),
mxExpectationNormal( covariance="M1.Sdz", means="M1.expMeandz",
dimnames=vnamesdz),  # the fit function
mxFitFunctionML()
)
MZ =  mxModel('MZ',
mxData( observed=w_mzdat, type="raw"),
mxExpectationNormal( covariance="M1.Smz", means="M1.expMeanmz",
dimnames=vnamesmz),  # the fit function
mxFitFunctionML()
)
#
Model_1 <-  mxModel("model2", M1, MZ, DZ,
mxFitFunctionMultigroup( c("MZ","DZ"))
)
#
#
# fit the model
Model_1out <- mxRun(Model_1, intervals=F)
#
summary(Model_1out)
sat_1out = mxRefModels(Model_1out, run=T)
mxCompare(sat_1out, Model_1out)
#
#
Model_1b = omxSetParameters(Model_1out, labels=c('b1'), free=F, values=c(0))
Model_1b_out <- mxRun(Model_1b, intervals=T)
mxCompare(Model_1out, Model_1b_out)
Model_1g = omxSetParameters(Model_1out, labels=c('g1'), free=F, values=c(0))
Model_1g_out <- mxRun(Model_1g, intervals=T)
mxCompare(Model_1out, Model_1g_out)
Model_1bg = omxSetParameters(Model_1out, labels=c('g1','b1'), free=F, values=c(0))
Model_1bg_out <- mxRun(Model_1bg, intervals=T)
mxCompare(Model_1out, Model_1bg_out)
#
mxRefModels(Model_1out, run=T) -> sat_1out
mxCompare(sat_1out, Model_1out)
#
#
# -----------------------------------------------   def vars ------------- mz and dz
#
#
varnames=c('pht1','pht2')#
#
# the model to calculate expected summary statistics
# this is the twin model phenotypic
# [1] "pht1"   "pht2"   "pgsm"   "pgsf"   "pgst1"  "pgsnt1" "pgst2"  "pgsnt2" "pgsmf"  "mpgst"
# [1] "pgsm"  "pgsf"  "pgst1" "pgst2" "pht1"  "pht2"  "pgsmf" "mpgst"
nphen1=1
nphen2=2
ACE1  = mxModel("ACE",
#
# Matrices a, c, and e to store the a, c, and e path coefficients
mxMatrix(type="Lower", nrow=nphen1, ncol=nphen1,
free=c(T), values=t(.3),
label=c("a11"),name="a"),
mxMatrix(type="Lower", nrow=nphen1, ncol=nphen1,
free=c(T), values=c(.2),
label=c("c11"),name="c"),
mxMatrix(type="Lower", nrow=nphen1, ncol=nphen1,
free=c(T), values=c(.7),
label=c("e11"),name="e"),
#
# Matrixes A, C, and E to compute A, C, and E variance components
#
#   mxAlgebra( expression=a %*% t(a), name="A"),    # a^2
#   mxAlgebra( expression=c %*% t(c), name="C"),    # c^2
#   mxAlgebra( expression=e %*% t(e), name="E"),    # e^2
mxAlgebra( expression=a, name="A"),    # a^2
mxAlgebra( expression=c, name="C"),    # c^2
mxAlgebra( expression=e, name="E"),    # e^2
#
#
# Matrix expCovMZ for expected covariance matrix for MZ twins
mxAlgebra( expression=
rbind( cbind(A+C+E, A+C),
cbind(A+C, A+C+E)),name="expCovMZ"),
# Matrix expCovMZ for expected covariance matrix for DZ twins
mxAlgebra( expression=
rbind( cbind(A+C+E, .5%x%A+C),
cbind(.5%x%A+C, A+C+E)),name="expCovDZ")
)
# a model the data, the fit function (MZ)
MZmodel=mxModel("MZ",
#
# Matrix expMean for expected mean vector for MZ and DZ twins
mxMatrix(type="Full", nrow=1, ncol=4, free=F, labels=c("data.pgst1","data.pgst2","data.pgsm","data.pgsf"), name="pred"),
mxMatrix(type="Full", nrow=1, ncol=4, free=c(T,T,T,T), values=c(0,0,0,0),
labels=c("bpgst","bpgsb","bpgsg","bpgsg"), name="bs1"),
mxMatrix(type="Full", nrow=1, ncol=4, free=T, values=c(0,0,0,0),
labels=c("bpgsb","bpgst","bpgsg","bpgsg"), name="bs2"),
mxMatrix(type="Full", nrow=1, ncol=1,
free=c(T),values=c(0),label=c("b0"),
name="B0"),
mxAlgebra(expression=cbind(B0+pred%*%t(bs1), B0+pred%*%t(bs2)), name='expMean'),
mxData(observed=phdatmz_e, type="raw"),
mxExpectationNormal(covariance="ACE.expCovMZ",
means = "expMean", varnames),
mxFitFunctionML()
)
# a model the data, the fit function (DZ)
DZmodel=mxModel("DZ",
#
# Matrix expMean for expected mean vector for MZ and DZ twins
mxMatrix(type="Full", nrow=1, ncol=4, free=F, labels=c("data.pgst1","data.pgst2","data.pgsm","data.pgsf"), name="pred"),
mxMatrix(type="Full", nrow=1, ncol=4, free=c(T,T,T,T), values=c(0,0,0,0),
labels=c("bpgst","bpgsb","bpgsg","bpgsg"), name="bs1"),
mxMatrix(type="Full", nrow=1, ncol=4, free=T, values=c(0,0,0,0),
labels=c("bpgsb","bpgst","bpgsg","bpgsg"), name="bs2"),
mxMatrix(type="Full", nrow=1, ncol=1,
free=c(T),values=c(0),label=c("b0"),
name="B0"),
mxAlgebra(expression=cbind(B0+pred%*%t(bs1), B0+pred%*%t(bs2)), name='expMean'),
mxData(observed=phdatdz_e, type="raw"),
mxExpectationNormal(covariance="ACE.expCovDZ",
means = "expMean", varnames),
mxFitFunctionML()
)
Model_2 <-  mxModel("twinACE", ACE1, MZmodel, DZmodel, mxFitFunctionMultigroup( c("MZ","DZ") )
#               mxAlgebra(MZ.objective + DZ.objective, name="minus2loglikelihood"),
#               mxFitFunctionAlgebra("minus2loglikelihood")
)
# fit the model
Model_2out <- mxRun(Model_2)
summary(Model_2out)
#
#
# sat
#
# -----------------------------------------------   defvars . no backgroud ACE
varnames=c('pht1','pht2')#
#
# the model to calculate expected summary statistics
# this is the twin model phenotypic
# [1] "pht1"   "pht2"   "pgsm"   "pgsf"   "pgst1"  "pgsnt1" "pgst2"  "pgsnt2" "pgsmf"  "mpgst"
# [1] "pgsm"  "pgsf"  "pgst1" "pgst2" "pht1"  "pht2"  "pgsmf" "mpgst"
nphen1=1
nphen2=2
SAT1  = mxModel("SAT",
#
# Matrices a, c, and e to store the a, c, and e path coefficients
mxMatrix(type="Stand", nrow=nphen2, ncol=nphen2,
free=c(T), values=c(.5),
label=c("rmz"),name="Rmz"),
mxMatrix(type="Stand", nrow=nphen2, ncol=nphen2,
free=c(T), values=c(.25),
label=c("rdz"),name="Rdz"),
mxMatrix(type="Diag", nrow=nphen2, ncol=nphen2,
free=c(T), values=c(.7),
label=c("sd","sd"),name="SD"),
#
#
# Matrix expCovMZ for expected covariance matrix for MZ twins
mxAlgebra( expression=
SD%*%Rmz%*%SD,name="expCovMZ"),
# Matrix expCovMZ for expected covariance matrix for DZ twins
mxAlgebra( expression=
SD%*%Rdz%*%SD,,name="expCovDZ")
)
# a model the data, the fit function (MZ)
MZmodel=mxModel("MZ",
#
# Matrix expMean for expected mean vector for MZ and DZ twins
mxMatrix(type="Full", nrow=1, ncol=4, free=F, labels=c("data.pgst1","data.pgst2","data.pgsm","data.pgsf"), name="pred"),
mxMatrix(type="Full", nrow=1, ncol=4, free=c(T,T,T,T), values=c(0,0,0,0),
labels=c("bpgst","bpgsb","bpgsg","bpgsg"), name="bs1"),
mxMatrix(type="Full", nrow=1, ncol=4, free=T, values=c(0,0,0,0),
labels=c("bpgsb","bpgst","bpgsg","bpgsg"), name="bs2"),
mxMatrix(type="Full", nrow=1, ncol=1,
free=c(T),values=c(0),label=c("b0"),
name="Int"),
mxAlgebra(expression=cbind(b0+pred%*%t(bs1), b0+pred%*%t(bs2)), name='expMean'),
mxData(observed=phdatmz_e, type="raw"),
mxExpectationNormal(covariance="SAT.expCovMZ",
means = "expMean", varnames),
mxFitFunctionML()
)
# a model the data, the fit function (DZ)
DZmodel=mxModel("DZ",
#
# Matrix expMean for expected mean vector for MZ and DZ twins
mxMatrix(type="Full", nrow=1, ncol=4, free=F, labels=c("data.pgst1","data.pgst2","data.pgsm","data.pgsf"), name="pred"),
mxMatrix(type="Full", nrow=1, ncol=4, free=c(T,T,T,T), values=c(0,0,0,0),
labels=c("bpgst","bpgsb","bpgsg","bpgsg"), name="bs1"),
mxMatrix(type="Full", nrow=1, ncol=4, free=T, values=c(0,0,0,0),
labels=c("bpgsb","bpgst","bpgsg","bpgsg"), name="bs2"),
mxMatrix(type="Full", nrow=1, ncol=1,
free=c(T),values=c(0),label=c("b0"),
name="B0"),
mxAlgebra(expression=cbind(B0+pred%*%t(bs1), B0+pred%*%t(bs2)), name='expMean'),
mxData(observed=phdatdz_e, type="raw"),
mxExpectationNormal(covariance="SAT.expCovDZ",
means = "expMean", varnames),
mxFitFunctionML()
)
Model_3 <-  mxModel("twinSAT", SAT1, MZmodel, DZmodel, mxFitFunctionMultigroup( c("MZ","DZ") )
#               mxAlgebra(MZ.objective + DZ.objective, name="minus2loglikelihood"),
#               mxFitFunctionAlgebra("minus2loglikelihood")
)
# fit the model
Model_3out <- mxRun(Model_3)
summary(Model_3out)
#
# ---------------------------------------------------------- def vars DZ only
# sat
#
# -----------------------------------------------   defvars . no backgroud ACE dz only
varnames=c('pht1','pht2')#
#
# the model to calculate expected summary statistics
# this is the twin model phenotypic
# [1] "pht1"   "pht2"   "pgsm"   "pgsf"   "pgst1"  "pgsnt1" "pgst2"  "pgsnt2" "pgsmf"  "mpgst"
# [1] "pgsm"  "pgsf"  "pgst1" "pgst2" "pht1"  "pht2"  "pgsmf" "mpgst"
nphen1=1
nphen2=2
DZModel  = mxModel("DZonly",
#
# Matrices a, c, and e to store the a, c, and e path coefficients
mxMatrix(type="Stand", nrow=nphen2, ncol=nphen2,
free=c(T), values=c(.25),
label=c("rdz"),name="Rdz"),
mxMatrix(type="Diag", nrow=nphen2, ncol=nphen2,
free=c(T), values=c(.7),
label=c("sd","sd"),name="SD"),
#
#
# Matrix expCovMZ for expected covariance matrix for DZ twins
#
mxAlgebra( expression=
SD%*%Rdz%*%SD,,name="expCovDZ"),
#
# Matrix expMean for expected mean vector for DZ twins
#
mxMatrix(type="Full", nrow=1, ncol=4, free=F, labels=c("data.pgst1","data.pgst2","data.pgsm","data.pgsf"), name="pred"),
mxMatrix(type="Full", nrow=1, ncol=4, free=c(T,T,T,T), values=c(0,0,0,0),
labels=c("bpgst","bpgsb","bpgsg","bpgsg"), name="bs1"),
mxMatrix(type="Full", nrow=1, ncol=4, free=T, values=c(0,0,0,0),
labels=c("bpgsb","bpgst","bpgsg","bpgsg"), name="bs2"),
mxMatrix(type="Full", nrow=1, ncol=1,
free=c(T),values=c(0),label=c("b0"),
name="B0"),
mxAlgebra(expression=cbind(B0+pred%*%t(bs1), B0+pred%*%t(bs2)), name='expMean'),
mxData(observed=phdatdz_e, type="raw"),
mxExpectationNormal(covariance="expCovDZ",
means ="expMean", varnames),
mxFitFunctionML()
)
# Model_4 <-  mxModel(name="DZ1SAT", DZModel)
Model_4 <-  mxModel(DZModel)
# fit the model
Model_4out <- mxRun(Model_4)
summary(Model_4out)
#
# -------------------------------------------------------------------------------
#
#
#
#
Model_2g=omxSetParameters(Model_2out, labels='bpgsg', value=0, free=F)
Model_2g_out = mxRun(Model_2g)
#
Model_2b=omxSetParameters(Model_2out, labels='bpgsb', value=0, free=F)
Model_2b_out = mxRun(Model_2b)
# "bpgsb","bpgsg"
Model_2bg = omxSetParameters(Model_2out, labels=c('bpgsb','bpgsg'), free=F, values=c(0))
Model_2bg_out <- mxRun(Model_2bg)
#
ncp1bg=mxCompare(Model_1out, Model_1bg_out)[2,7]
pw1bg=powchi(alpha, 2, ncp1bg)
mxkeep[ii,1:2]=c(ncp1bg,pw1bg) # openmx results
#
ncp1g=mxCompare(Model_1out, Model_1g_out)[2,7]
pw1g=powchi(alpha,1,ncp1g)
mxkeep[ii,3:4]=c(ncp1g,pw1g) # openmx results
#
ncp1b=mxCompare(Model_1out, Model_1b_out)[2,7]
pw1b=powchi(alpha,1,ncp1b)
mxkeep[ii,5:6]=c(ncp1b,pw1b) # openmx results
#
ncp2bg=mxCompare(Model_2out, Model_2bg_out)[2,7]
pw2bg=powchi(alpha, 2, ncp2bg)
mxkeep[ii,7:8]=c(ncp2bg,pw2bg) # openmx results
#
ncp2g=mxCompare(Model_2out, Model_2g_out)[2,7]
pw2g=powchi(alpha,1,ncp2g)
mxkeep[ii,9:10]=c(ncp2g,pw2g) # openmx results
#
ncp2b=mxCompare(Model_2out, Model_2b_out)[2,7]
pw2b=powchi(alpha,1,ncp2b)
mxkeep[ii,11:12]=c(ncp2b,pw2b) # openmx results
#
}}}
}}}
#summary(egeeM3mzdzL)$coefficients
#anova(egeeM3mzdzL, egeeM1mzdzL)
#anova(egeeM3mzdzL, egeeM2mzdzL)
#
round(reskeep[,ipow],3)
round(mxkeep,3)
Model_3g=omxSetParameters(Model_3out, labels='bpgsg', value=0, free=F)
Model_3g_out = mxRun(Model_3g)
#
Model_3b=omxSetParameters(Model_3out, labels='bpgsb', value=0, free=F)
Model_3b_out = mxRun(Model_3b)
# "bpgsb","bpgsg"
Model_3bg = omxSetParameters(Model_3out, labels=c('bpgsb','bpgsg'), free=F, values=c(0))
Model_3bg_out <- mxRun(Model_3bg)
summary(Model_3b_out)$parameters[5, 'Estimate'] # bpgsg - CT Model 3 CT only
summary(Model_3g_out)$parameters[5, 'Estimate'] # bpgsb - SI Model 3 SI only
summary(Model_3b_out)$parameters
summary(Model_3g_out)$parameters[5, 'Estimate']
summary(Model_3g_out)
summary(Model_4b_out)
Model_4g=omxSetParameters(Model_4out, labels='bpgsg', value=0, free=F)
Model_4g_out = mxRun(Model_4g)
#
Model_4b=omxSetParameters(Model_4out, labels='bpgsb', value=0, free=F)
Model_4b_out = mxRun(Model_4b)
# "bpgsb","bpgsg"
Model_4bg = omxSetParameters(Model_4out, labels=c('bpgsb','bpgsg'), free=F, values=c(0))
Model_4bg_out <- mxRun(Model_4bg)
summary(Model_4b_out)
summary(Model_4b_out)
e15
e15 = summary(Model_4b_out)$parameters[5, 'Estimate'] # bpgsg - CT Model 4 CT only
e16 = summary(Model_4g_out)$parameters[5, 'Estimate'] # bpgsb - SI Model 4 SI only
e17 = summary(Model_4out)$parameters[6, 'Estimate'] # bpgsg - CT Model 4
e18 = summary(Model_4out)$parameters[5, 'Estimate'] # bpgsb - SI Model 4
e15
summary(Model_4b_out)
summary(Model_4g_out)
summary(Model_4out)
# Create data frames with specific data
df1 <- data.frame(x = 1:5, y = letters[1:5])
df2 <- data.frame(x = 6:10, y = letters[6:10])
df3 <- data.frame(x = 11:15, y = letters[11:15])
df4 <- data.frame(x = 16:20, y = letters[16:20])
# Combine data frames into a list
list_of_dataframes <- list(df1, df2, df3, df4)
View(list_of_dataframes)
list_of_dataframes[[1]]
